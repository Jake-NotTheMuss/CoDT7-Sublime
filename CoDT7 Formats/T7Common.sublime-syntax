%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

# This file is part of the T7-Sublime project.
# T7-Sublime is an enhanced syntax-highlighting package for (almost) all Call of Duty Black Ops III developer file formats.
# T7 Common is an internal library containing common rules which are used by the visible syntax files.

name: T7 Common
hidden: true
scope: source.t7formats

variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'

  dec_digits: '{{dec_digit}}+'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'

  identifier: \b[[:alpha:]_][[:alnum:]_]*\b
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars

contexts:
  main:
    - include: comments
    - include: numbers
    - include: operators
    - include: strings

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.t7formats
      captures:
        1: meta-toc-list.banner.block.t7formats
    - match: /\*
      scope: punctuation.definition.comment.t7formats
      push:
        - meta_scope: comment.block.t7formats
        - match: \*/
          scope: punctuation.definition.comment.t7formats
          pop: true
        - match: ^\s*(\*)(?!/)
          captures:
            1: punctuation.definition.comment.t7formats
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.t7formats
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.t7formats
      captures:
        1: meta.toc-list.banner.line.t7formats
    - match: //
      scope: punctuation.definition.comment.t7formats
      push:
        - meta_scope: comment.line.double-slash.t7formats
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.t7formats
        - match: \n
          pop: true

  numbers:
    # decimal float
    - match: |-
        (?x:
          \b({{dec_digits}})
          (?:
            ( (\.)
              (?:
                {{dec_digits}} {{dec_exponent}}?
                | {{dec_exponent}}
                | (?!\.)
              )
            )
          ) ({{dec_suffix}})?
          | ( (\.) {{dec_digits}} {{dec_exponent}}? ) ({{dec_suffix}})?
        )
      scope: meta.number.float.decimal.t7formats
      captures:
        1: constant.numeric.value.t7formats
        2: constant.numeric.value.t7formats
        3: punctuation.separator.decimal.t7formats
        4: invalid.illegal.numeric.suffix.t7formats
        5: constant.numeric.value.t7formats
        6: punctuation.separator.decimal.t7formats
        7: invalid.illegal.numeric.suffix.t7formats

    # hexadecimal float
    - match: \b(0[xX])({{hex_digit}}*(\.){{hex_digit}}*{{hex_exponent}})({{dec_suffix}})?
      scope: meta.number.float.hexadecimal.t7formats
      captures:
        1: constant.numeric.base.t7formats
        2: constant.numeric.value.t7formats
        3: punctuation.separator.decimal.t7formats
        4: invalid.illegal.numeric.suffix.t7formats

    # binary integer
    - match: \b(0[bB])({{bin_digit}}*)({{bin_suffix}})?
      scope: meta.number.integer.binary.t7formats
      captures:
        1: constant.numeric.base.t7formats
        2: constant.numeric.value.t7formats
        3: invalid.illegal.numeric.suffix.t7formats

    # hexadecimal integer
    - match: \b(0[xX])({{hex_digit}}*)({{hex_suffix}})?
      scope: meta.number.integer.hexadecimal.t7formats
      captures:
        1: constant.numeric.base.t7formats
        2: constant.numeric.value.t7formats
        3: invalid.illegal.numeric.suffix.t7formats

    # octal integer
    - match: \b(0)({{oct_digit}}+)({{oct_suffix}})?
      scope: meta.number.integer.octal.t7formats
      captures:
        1: constant.numeric.base.t7formats
        2: constant.numeric.value.t7formats
        3: invalid.illegal.numeric.suffix.t7formats

    # decimal integer
    - match: \b({{dec_digits}})({{dec_suffix}})?
      scope: meta.number.integer.decimal.t7formats
      captures:
        1: constant.numeric.value.t7formats
        2: invalid.illegal.numeric.suffix.t7formats

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.t7formats
      push:
        - meta_scope: string.quoted.double.t7formats
        - match: '"'
          scope: punctuation.definition.string.end.t7formats
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: (\\)$\n
      captures:
        1: punctuation.separator.continuation.t7formats
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9](0,2)|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.t7formats
    - match: \\.
      scope: invalid.illegal.unknown-escape.t7formats

  operators:
    - match: (?:\+\+|\-\-)
      scope: punctuation.operator.arithmetic.t7formats
    - match: '->|::'
      scope: punctuation.accessor.t7formats
    - match: \+\=|\-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: punctuation.operator.assignment.augmented.t7formats
    - match: <<|>>|&&|\|\|
      scope: punctuation.operator.arithmetic.t7formats
    - match: <\=|>\=|\=\=|<|>|\!\=|\=\=\=|\!\=\=
      scope: punctuation.operator.comparison.t7formats
    - match: \+|\-|(?<!#)/(?!#)|%|\||\^|\~|\!
      scope: punctuation.operator.arithmetic.t7formats
    - match: '&(?!\s*")'
      scope: punctuation.operator.address-of.t7formats
    - match: '\='
      scope: punctuation.operator.assignment.t7formats
    - match: '\?|:'
      scope: punctuation.operator.ternary.t7formats

  preprocessor-disabled:
    - match: '^\s*(#\s*if(n?def)?)\b'
      captures:
        1: meta.preprocessor.t7formats
      push:
        - match: '^\s*(#\s*endif)\b'
          captures:
            1: meta.preprocessor.t7formats
          pop: true
        - include: preprocessor-disabled

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.t7formats
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.t7formats

  preprocessor-line-ending:
    - match: $\n
      pop: true

  preprocessor-line-ending-lookahead:
    - match: (?=$\n)
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.t7formats
      push:
        - meta_scope: comment.block.t7formats
        - match: '\\$\n'
          scope: punctuation.separator.continuation.t7formats
        - match: \*/
          scope: punctuation.definition.comment.t7formats
          pop: true
    - match: //
      scope: punctuation.definition.comment.t7formats
      push:
        - meta_scope: comment.line.double-slash.t7formats
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.t7formats
          pop: true
        - match: (?=\n)
          pop: true