%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

# This file is part of the T7-Sublime project.
# T7-Sublime is an enhanced syntax-highlighting package for (almost) all Call of Duty Black Ops III developer file formats.
# GSC is a dedicated scripting language which targets Call of Duty's virtual machine.

name: GSC
file_extensions:
  - gsc
  - csc
  - gsh
scope: source.codt7.gsc

variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'

  dec_digits: '{{dec_digit}}+'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'

  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars

  # pattern used to identify a binary operation on 2 constants/variables
  # for operators that do different things depending on the number of operands
  variable_or_constant_border: '[[:alpha:]\h\.]'
  
  control_keywords: 'break|case|continue|default|do|else|for|foreach|in|if|return|switch|while|thread|wait|waitrealtime|waittillframeend'
  basic_types: 'var'
  type_qualifier: 'const'
  compiler_directive: 'private|autoexec'
  modifiers: '{{type_qualifier}}|{{compiler_directive}}'
  keyword_operators: 'isdefined|assert|assertmsg|wait|waitrealtime|gettime|vectorscale|waittill|waittillmatch|notify|endon|profilestart|profileend'
  non_func_keywords: 'if|for|foreach|switch|while|{{keyword_operators}}'

  language_constant: 'undefined|self|world|classes|level|game|anim|vararg|false|true'

  # builtin engine functions
  function_builtin: 'ActivateClientExploder|ActivateClientRadiantExploder|ActorIKEnabled|AddAwarenessIndicator|AddBonusCardStat|AddDemoBookmark|AddEntityInfluencer|AddFriendlyScrambler|AddInfluencer|AddOrientedInfluencer|AddSensorGrenadeArea|AddSpawnPoints|AddTestClient|AddToInterestPool|AddZombieBoxWeapon|AimAtEntityIK|AimAtPosIK|AimingAtFriendly|AllClientsPrint|AllocateSoundRandoms|AllowActionSlotInput|AllowedStances|AllowRoundAnimation|AllowScoreboard|AllowTacticalInsertion|AllWeaponAttachmentsUnlocked|AnimHasNotetrack|AnimMappingSearch|AnimRelative|AnimScripted|Announcement|ApplyBallisticTarget|AreAllMissionsAtScore|AreMeshesStreamed|arenagetcurrentseason|ArenaGetSlot|AreTexturesLoaded|AreTexturesStreamed|ArraySort|ArraySortClosest|ArtilleryIconLocation|ASMSetAnimationRate|Attach|AttachShieldModel|AttachWeapon|BadPlace_Box|BadPlace_Cylinder|BadPlace_Delete|BallSetTarget|Ban|BeamTrace|BloodImpact|BlurAndTint_FX|Bobbing|BonusCardActiveCount|BoundsWouldTelefrag|BulletSpread|BulletTrace|BulletTracePassed|CamAnimScripted|CameraForceDisableScriptCam|CameraSetLensId|CameraSetUpdateCallback|CanClaimNode|CanPath|ChangeAdvertisedStatus|CheckIfSongUnlocked|CheckNavMeshDirection|CleanupSpawnedDynEnts|ClearAlternateAimParams|ClearAnim|ClearAnimLimited|ClearLastUpdatedCollectibles|ClearMaterialOverride|ClearNearestEnemyScrambler|ClearPlayerCorpses|ClearPlayerGravity|ClearSpawnPoints|ClearSpawnPointsBaseWeight|ClearStepTriggerSound|ClearStowedWeapon|ClearStreamerRequest|ClearTargetEntity|ClearTopScorers|ClientAnnouncement|ClientClaimTrigger|ClientPrint|ClientReleaseTrigger|ClientSysRegister|ClientSysSetState|CloneAndRemoveEntity|codcaster_keyline_enable|CodeGetClientField|CodeGetPlayerStateClientField|CodeGetUIModelClientField|CodeGetWorldClientField|CodeIncrementClientField|CodeIncrementPlayerStateClientField|CodeIncrementUIModelClientField|CodeIncrementWorldClientField|CodeSetClientField|CodeSetPlayerStateClientField|CodeSetUIModelClientField|CodeSetWorldClientField|CollisionTestPointsInBox|CollisionTestPointsInCone|CollisionTestPointsInCylinder|CollisionTestPointsInPill|CollisionTestPointsInSphere|ConnectPaths|ConsumableDecrement|ConsumableGet|ConsumableIncrement|ConsumableSet|CountPlayers|CreateDynEntAndLaunch|CreateSoundRandom|CreateStreamerHint|CurrentSessionMode|CylinderDamage|DamageConeTrace|DeactivateClientExploder|DeactivateClientRadiantExploder|Delete|DeletePathNode|DemoIsAnyFreeMoveCamera|DemoIsDollyCamera|DemoIsEditCamera|DemoIsMovieCamera|DeployRiotShield|DepthInWater|DepthOfPlayerInWater|Detach|DetachAll|DetachShieldModel|Detonate|DirectionalHitIndicator|DisableAimAssist|DisableDestructiblePieces|DisableGrenadeSuicide|DisableGrenadeTouchDamage|DisableOffhandSpecial|DisableOnRadar|DisableSpawnPointList|DisableSpeedBlur|DisableVehicleSounds|DisconnectPaths|DoDamage|DoesWeaponReplaceSpawnWeapon|DontInterpolate|DoubleXPTimerFired|DragonStrike_Enable|DragonStrike_SetColorRadiusSpinPulse|DragonStrike_SetPosition|DrawNode|DropNodEToFloor|EACPathSet|Earthquake|EnableAimAssist|EnableAllDestructiblePieces|EnableGrenadeSuicide|EnableGrenadeTouchDamage|EnableInfluencer|EnableLinkTo|EnableNavMeshTrigger|EnableObstacle|EnableOffhandSpecial|EnableOnRadar|EnableSpawnPointList|EnableSpeedBlur|EnableVehicleSounds|EndCamAnimScripted|EndExtraCamAnimScripted|evSetRanges|ExitLevel|ExperimentsGetVariant|ExtraCamAnimScripted|FakeFire|FindAnimByName|FindDRFilter|FindPath|FlashbackFinish|FlashbackStart|FlushSubtitles|FootstepDoEverything|FootstepDoFootstepFX|FootstepDoNothing|FootstepDoSound|ForceAmbientRoom|ForceDelete|ForceGameModeMappings|ForcePainOn|ForceStreamBundle|ForceStreamMaterial|ForceStreamWeaponRenderOptions|ForceStreamWeapons|ForceStreamXModel|ForceTModeVisible|FXBlockSight|GadgetActivate|GadgetCharging|GadgetDeactivate|GadgetFlickering|GadgetGetSlot|GadgetIsActive|GadgetIsPrimed|GadgetIsReady|GadgetPowerChange|GadgetPowerGet|GadgetPowerReset|GadgetPowerSet|GadgetPulseGetOwner|GadgetPulseResetReveal|GadgetPulseRevealed|GadgetSetActivateTime|GadgetSetEntity|GadgetSetInfrared|GadgetStateChange|GadgetTargetResult|GameModeIsMode|GeneratePointsAroundCenter|GenerateScriptEvent|GetAbsMaxs|GetAbsMins|GetActiveLocalClients|GetActorArray|GetActorSpawnerArray|GetActorSpawnerTeamArray|GetActorTeamArray|GetActorTeamCountRadius|GetActorWeaponOptions|GetAIArchetypeArray|GetAIArray|GetAICount|GetAIFxName|GetAILimit|GetAimAngles|GetAISpeciesArray|GetAITeamArray|GetAITriggerFlags|GetAllCharacterBodies|GetAllCharacterHeads|GetAllNodes|GetAmmoCount|GetAngleDelta|GetAngleFromBits|GetAngles|GetAnimCurrFrameCount|GetAnimForCharacter|GetAnimFrameCount|GetAnimLength|GetAnimStateCategory|GetAnimTagOrigin|GetAnimTime|GetAnyNodeArray|GetArchetypeFromClassname|GetAssignedTeam|GetAssignedTeamName|GetAtrLoaded|GetAttachIgnoreCollision|GetAttachmentCosmeticVariantForWeapon|GetAttachmentCosmeticVariantIndexes|GetAttachmentNames|GetAttachModelName|GetAttachSize|GetAttachTagName|GetBaseWeaponItemIndex|GetBestInfluencepos|GetBestSpawnPoint|GetBitsForAngle|GetBodyAccentColorCountForHero|GetBodyRenderOptionsPacked|GetBrushModelCenter|GetBuildKitAttachmentCosmeticVariantIndexes|GetBuildKitWeapon|GetBuildKitWeaponOptions|GetCamAngles|GetCamAnglesByLocalClientNum|GetCamAnimTime|GetCamPos|GetCamPosByLocalClientNum|GetCentroid|GetCharacterAssetName|GetCharacterBodyModelColorCount|GetCharacterBodyModelCount|GetCharacterBodyStyleIndex|GetCharacterCustomizationForXUID|GetCharacterDisplayName|GetCharacterFields|GetCharacterHeadRenderOptions|GetCharacterHelmetHidesHead|GetCharacterHelmetModelColorCount|GetCharacterHelmetModelCount|GetCharacterHelmetRenderOptions|GetCharacterIndex|GetCharacterModeRenderOptions|GetClassIndexFromName|GetClientFieldVersion|GetClientTime|GetClones|GetClosestPointOnNavMesh|GetClosestPointOnNavVolume|GetContractName|GetContractRequiredCount|GetContractRequirements|GetContractResetConditions|GetControllerPosition|GetControllerType|GetCorpseAnim|GetCorpseArray|GetCounterTotal|GetCoverNodeArray|GetCrateHeadObjective|GetCurrentAnimScriptedName|GetCurrentEventId|GetCurrentEventName|GetCurrentEventOriginator|GetCurrentEventType|GetCurrentEventTypeName|GetCurrentGunRank|GetCurrentWeaponIncludingMelee|GetCustomTeamName|GetCyberComAbilityName|getCybercomType|GetCyberComWeapon|GetDamageableEntArray|GetDebugEye|GetDecorations|GetDefaultClassSlot|GetDemoVersion|GetDistanceFromScreenCenter|GetDroppedWeapons|getdynent|getdynentarray|GetEnemies|GetEnemyScramblerAmount|GetEnt|GetEntArray|GetEntArrayByType|GetEntArrayFromArray|GetEntByNum|getEnterButton|GetEntityAnimRate|GetEntityNumber|GetEntityType|GetEntNavMaterial|GetEntNum|GetEquipmentHeadObjective|GetEquippedBodyAccentColorForHero|GetEquippedBodyForHero|GetEquippedBodyIndexForHero|GetEquippedCharacterIndexForLobbyClientHero|GetEquippedHeadIndexForHero|GetEquippedHelmetAccentColorForHero|GetEquippedHelmetForHero|GetEquippedHelmetIndexForHero|GetEquippedHeroIndex|GetEquippedHeroMode|GetEquippedLoadoutItemForHero|GetEquippedShowcaseWeaponForHero|GetEventPointOfInterest|GetEye|GetEyeApprox|GetFirstHeadOfGender|GetFirstHeroOfGender|GetFirstTouchFraction|GetFlowGraphDef|GetFogSettings|GetFootstepStrings|GetFreeActorCount|GetFreerunTrackIndex|GetFriendlyScramblerAmount|GetGadgetPower|GetGameTypeEnumFromName|GetGametypeSetting|GetGrappleTargetArray|GetGroundEnt|GetHeadGender|GetHealthOverlayTime|GetHeliDamageState|GetHelmetAccentColorCountForHero|GetHeroBodyModelIndices|GetHeroes|GetHeroGender|GetHeroHeadModelIndices|GetHeroHelmetModelIndices|GetHorizontalOffsetFromScreenCenter|GetInfluenceAt|GetInfluenceFacePos|GetInfluenceNumFaces|GetInfluencerPreset|GetInfluencerTimeoutRemaining|GetInKillcam|GetInterestPoolAwareness|GetInterestPoolValue|GetItemArray|GetItemAttachment|GetItemAttachmentAllocationCost|GetItemGroupForWeaponName|GetItemGroupFromItemIndex|GetKillCamEntity|GetKnownLength|GetLastOutWaterTime|GetLightColor|GetLightExponent|GetLightFovOuter|GetLightIntensity|GetLightRadius|GetLinkedEnt|GetLoadoutAllocation|GetLoadoutGunSmithVariantIndex|GetLoadoutItem|GetLoadoutItemRef|GetLoadoutPerks|GetLoadoutWeapon|GetLobbyClientCount|GetLocalClientAngles|GetLocalClientDriver|GetLocalClientEyePos|GetLocalClientFOV|GetLocalClientNumber|GetLocalClientPos|GetLocalGunnerAngles|GetLocalPlayer|GetLocalPlayers|GetLocalPlayerTeam|GetMapAtIndex|GetMapFields|GetMapIntroMovie|GetMapOrder|GetMapOutroMovie|GetMaxLocalClients|GetMaxReverseSpeed|GetMaxs|GetMaxVehicles|GetMeleeChainCount|getmicrosecondsraw|GetMigrationStatus|GetMillisecondsRaw|GetMins|GetMissileOwner|GetMissionName|GetMissionUniqueID|GetMissionVersion|GetMoveDelta|GetMovementType|GetMoverEnt|GetMoveSpeedScale|GetNavMeshFaceNormal|GetNavMeshTriggersForPoint|GetNearestNode|GetNearestPathPoint|GetNextMap|GetNextTraversalNodeOnPath|GetNode|GetNodeArray|GetNodeArraySorted|GetNodeEdge|GetNodeIndexOnPath|GetNodeOwner|GetNodeRegion|GetNodesInRadius|GetNodesInRadiusSorted|GetNonPredictedLocalPlayer|GetNormalHealth|GetNorthYaw|GetNotetracksInDelta|GetNotetrackTimes|GetNumberOfCollectiblesForLevel|GetNumChallengesComplete|GetNumConnectedPlayers|GetNumExpectedPlayers|GetNumFreeEntities|GetNumParts|GetNumZBarrierPieces|GetOrigin|GetOtherNodeInNegotiationPair|GetOwner|GetParentEntity|GetPartName|GetPathfindingRadius|GetPathMetric|GetPlaybackTime|GetPlayerCorpse|GetPlayerGibDef|GetPlayerGravity|GetPlayerLastOutWaterTime|GetPlayerName|GetPlayers|GetPlayerSelectedGestureName|GetPlayerSelectedTauntName|GetPlayerSpawnId|GetPlayerSpeed|GetPlayerVehicle|GetPointInBounds|GetPrimaryDeltaAnim|GetRandomCompatibleAttachmentsForWeapon|GetRandomPointOnNavVolume|GetRealTime|GetRefFromItemIndex|GetReflectionLocs|GetReflectionOrigin|GetRetrievableWeapons|GetRevealPulseMaxRadius|GetRevealPulseOrigin|GetRevealPulseRadius|GetRootMapName|GetRope|GetRoundsPlayed|GetScriptBundle|GetScriptBundleList|GetScriptBundleNames|GetScriptBundles|GetScriptMoverArray|GetServerHighestClientFieldVersion|GetShootAtPos|GetShoutcasterSetting|GetSkiptoName|GetSkipTos|GetSnapshotIndexArray|GetSoundFromSurfaceTable|GetSpawnerArray|GetSpawnerTeamArray|GetSpawnStructForCharacter|GetSpecialistIndex|GetStance|GetStartAngles|GetStartOrigin|GetStartTime|GetStowedWeapon|GetStreamerRequestProgress|GetStreamingProgress|GetTagAngles|GetTagOrigin|GetTargetEntity|GetTargetLockEntity|GetTargetLockEntityArray|GetTargetOrigin|GetTeam|GetTeamPlayersAlive|GetTeamSatellite|GetTeamScore|GetTeamSpyplane|GetTopPlayersBodyModel|GetTopPlayersBodyRenderOptions|GetTopPlayersGesture|GetTopPlayersHelmetModel|GetTopPlayersHelmetRenderOptions|GetTopPlayersIndex|GetTopPlayersTaunt|GetTopPlayersTeam|GetTopPlayersWeaponInfo|GetTopPlayersWeaponModel|GetTopPlayersWeaponRenderOptions|GetTopScorerCount|GetTotalAmmo|GetTotalServerPauseTime|gettotalunlockedweaponattachments|GetTouchingVolume|GetTriggerAccumulate|GetTurretArcLimits|GetTurretOwner|GetTurretTarget|GetUpgradedPieceNumLives|GetUTC|GetValidCoverPeekOuts|GetVehicleArray|GetVehicleSpawnerArray|GetVehicleSpawnerTeamArray|GetVehicleTeamArray|GetVehicleTriggerFlags|GetVelocity|GetVisibleNode|GetVisibleNodes|GetVisionPulseMaxRadius|GetVisionPulseRadius|getvrcamangles|GetVRCamAnglesByLocalClientNum|getvrcampos|GetVRCamPosByLocalClientNum|GetVRControllerAngles|GetVRControllerGripButton|GetVRControllerPosition|GetVRControllerXButton|GetWallRunWallNormal|GetWatcherWeapons|GetWaterHeight|GetWeapon|GetWeaponAccuracy|GetWeaponAttachments|GetWeaponChargeLevel|GetWeaponForCharacter|GetWeaponForwardDir|GetWeaponHackRatio|GetWeaponModelForCharacter|GetWeaponMuzzlePoint|GetWeaponOptic|GetWeaponPosFrac|GetWeaponWithAttachments|GetWeaponWorldModel|GetWeaponXCam|GetXCamForCharacter|GetXCamMouseControl|GetXModelCenterOffset|GetZBarrierArray|GetZBarrierAttackSlotHorzOffset|GetZBarrierNumAttackSlots|GetZBarrierPieceAnimLengthForState|GetZBarrierPieceAnimState|GetZBarrierPieceAnimSubState|GetZBarrierPieceIndicesInState|GetZBarrierPieceState|GetZBarrierReachThroughAttackAnimState|GetZBarrierTauntAnimState|Ghost|Gib|GlassRadiusDamage|GrenadeExplosionEffect|GroundTrace|HasAnimTree|HasASM|HasDObj|HasPart|HeliTurretDogTrace|HeliTurretSightTrace|Hide|HideFromTeam|hideinfovolume|HideMiscModels|HidePart|HideZBarrierPiece|IncrementCounter|incrementSpecificWeaponPickedUpCount|InfoVolumeDebugInit|InitClientObjectives|InLastStand|IPrintLn|IPrintLnBold|IsActor|IsActorCorpse|IsActorSpawner|IsADS|IsAI|IsAirborne|IsAlive|IsAnimLooping|IsArchetypeLoaded|IsArenaMode|IsAssetLoaded|IsAttached|IsBonusCardActive|IsBot|IsCamAnimLooping|IsCameraSpikeToggled|IsClientCacheStable|IsContentScreenFilterPlaying|IsCorpse|IsCoverNode|IsDangerous|IsDedicated|IsDemoPlaying|IsDoubleJumping|IsDriving|IsDynEntValid|IsEMPJammed|IsEntity|IsEntityLinkedToTag|IsEventServiced|IsFiringTurret|IsFlared|IsFriendly|IsGadgetMeleeCharging|IsGlobalStatsServer|IsGodMode|isGrenadeDud|IsHidden|IsInHelicopter|IsInScrCam|IsInScritpedAnim|IsInSecondChance|IsInsideHeightLock|IsLaserOn|IsLinkedTo|IsLoadingCinematicPlaying|IsLocalClientDead|IsLocalClientDriver|IsLocalGame|IsLocalPlayer|IsLocalPlayerViewLinked|IsLocalPlayerWeaponViewOnlyLinked|IsMantling|IsMapSubLevel|IsMature|ismissileinsideheightlock|IsMovingPlatform|IsNavVolumeLoaded|IsNodeEnabled|IsNodeOccupied|IsOnGround|IsOnLadder|IsOnSlide|IsOnTurret|IsPathfinder|IsPaused|IsPeelingOut|IsPlayer|IsPlayerCorpse|IsPlayerDead|IsPlayerDoubleJumping|IsPlayerFiring|IsPlayerJumping|IsPlayerNumber|IsPlayerSliding|IsPlayerSprinting|IsPlayerSwimming|IsPlayerSwimmingOnSurface|IsPlayerSwimmingUnderwater|IsPlayerTalking|IsPlayerUnderwater|IsPlayerWallRunning|IsPlayerWallRunningRight|IsPlayingAnimScripted|IsPlayingLoopSound|IsPointInNavVolume|IsPointOnNavMesh|IsPoisoned|IsRagdoll|IsRobot|IsScrambled|IsSentient|IsShoutcaster|IsSlamming|IsSliding|IsSpawner|IsSpawnPointVisible|IsSpectating|IsSplitScreen|IsSplitScreenHost|IsSprinting|IsStarterPack|IsStartingClassDefault|IsStreamed|IsStreamerReady|IsSwimming|IsTestClient|IsThirdPerson|IsTouching|IsTouchingSwept|IsTouchingVolume|IsTraversing|IsTriggerEnabled|IsTurretFiring|IsTurretLockedOn|IsUnderwater|IsUsingNavVolume|isUsingT7Melee|IsValidGametype|IsVehicle|IsVehicleSpawner|IsVisibleByPlayer|isvr|IsWallRunning|IsWallrunNode|IsWheelColliding|IsWheelPeelingOut|IsWheelSliding|IsWorldPaused|IsZBarrier|IsZBarrierClosed|IsZBarrierOpen|ItemWeaponSetAmmo|Kick|Kill|KillClientRadiantExploder|KillServer|LaserOff|LaserOn|Launch|launchdynent|LaunchRagdoll|LaunchVehicle|LerpViewAngleClamp|LinkNodes|LinkTo|LinkToBlendToTag|LinkToCamera|LinkToUpdateOffset|LinkTraversal|LoadSentientEventParameters|LoadSiegeAnim|LocalClientActive|LocalToWorldCoords|LookAtEntity|LookAtPos|LUINotifyEvent|LUINotifyEventToSpectators|MagicBullet|MagicGrenade|MagicGrenadeManual|MagicGrenadeManualPlayer|MagicGrenadePlayer|MagicGrenadeType|MagicMissile|MakeFakeAI|MakeGrenadeDud|MakePathfinder|MakeSentient|MakeTurretUnusable|MakeTurretUsable|MakeUnusable|MakeUsable|Map|Map_Restart|MapExists|MapShaderConstant|MarkAsDirty|MarkDestructibleDestroyed|MarkNoVehicleNavMeshFaces|matchRecordOvertimeRound|matchRecordRoundStart|Matrix4x4TransformPoints|MaySpawnEntity|MaySpawnFakeEntity|MisdirectionEnable|Missile_DroneSetVisible|Missile_GetTarget|missile_settarget|MissionFailed|MissionHasAccolades|MissionHasCollectibles|MissionRestart|MoveGravity|MoveSlide|MoveTo|MoveX|MoveY|MoveZ|NavPointSightFilter|NeedsRevive|NodesAreLinked|NodesVisible|NotSolid|NumRemoteClients|Obituary|Objective_Add|Objective_ClearAllUsing|Objective_ClearEntity|Objective_ClearPlayerUsing|Objective_Delete|Objective_FlipIcon|Objective_GetGamemodeFlags|Objective_Icon|Objective_OnEntity|Objective_Position|Objective_Set3D|Objective_SetColor|Objective_SetFlag|Objective_SetGamemodeFlags|Objective_SetIcon|Objective_SetIconSize|Objective_SetInvisibleToAll|Objective_SetInvisibleToPlayer|Objective_SetInvisibleToPlayerByIndex|Objective_SetPlayerUsing|Objective_SetProgress|Objective_SetSize|Objective_SetStencil|Objective_SetUIModelValue|Objective_SetVisibleToAll|Objective_SetVisibleToPlayer|Objective_SetVisibleToPlayerByIndex|Objective_State|Objective_Team|Objective_VisibleTeams|OffhandWeaponsEnabled|OverrideLightingOrigin|OverrideSpawnflags|PathDistance|PhysicsExplosionCylinder|PhysicsExplosionSphere|PhysicsJetThrust|PhysicsJolt|PhysicsLaunch|PhysicsTrace|PhysicsTraceEx|PlaceSpawnPoint|PlayBattleChatterToTeam|PlayerBeingSpectated|PlayerBulletTrace|PlayerCamLinkTo|PlayerCamUnlink|PlayerGrappleTrace|PlayerLinkedOffsetDisable|PlayerLinkedOffsetEnable|PlayerLinkedSetUseBaseAngleForViewClamp|PlayerLinkTo|PlayerLinkToAbsolute|PlayerLinkToBlend|PlayerLinkToDelta|PlayerLinkWeaponViewToDelta|PlayerPhysicsTrace|PlayerPhysicsTraceIgnoreEnt|PlayerPositionValid|PlayerPositionValidIgnoreEnt|PlayerSetGroundReferenceEnt|PlayerSightTrace|PlayFX|PlayFXOnCamera|PlayFXOnTag|PlayLoopedFX|PlayLoopSound|PlayRumbleLoopOnEntity|PlayRumbleLoopOnPosition|PlayRumbleOnEntity|PlayRumbleOnPosition|PlaySound|PlaySoundAtPosition|PlaySoundOnTag|PlaySoundToAllButPlayer|PlaySoundToPlayer|PlaySoundToTeam|PlaySoundWithNotify|PositionQuery_Filter_Directness|PositionQuery_Filter_DistanceToGoal|PositionQuery_Filter_InClaimedLocation|PositionQuery_Filter_Sight|PositionQuery_Source_Navigation|PositionWouldTelefrag|PrecacheLeaderboards|PredictGrenade|PredictPosition|PredictSpawnPoint|Print|PrintLn|ProcessClientFieldsAsIfNew|PropagateCurrentEvent|QSortScoredSpawnPointsAscending|queuemeleeactionstate|RadioActive_FX|RadiusDamage|ReCacheLeaderboards|RecordBreadcrumbDataForPlayer|RefreshShieldAttachment|RegisterClientField|RegisterSkipto|ReleaseClaimedTrigger|RemoveAllFriendlyScramblers|RemoveAllSensorGrenadeAreas|RemoveForceNoCull|RemoveFriendlyScrambler|RemoveInfluencer|RemoveNoSunShadow|RemoveSensorGrenadeArea|RemoveZombieBoxWeapon|RenderHealthOverlay|RenderHealthOverlayHealth|ReportUser|ResetAILimit|ResetDestructible|ResetDoubleJumpRechargeTime|ResetFOV|ResetGlass|ResetMissileDetonationTime|ResetWeaponCosts|ResetZombieBoxWeapons|ReviveObituary|RopeGetPosition|RopePulse|Rotate|RotatePitch|RotateRoll|RotateTo|RotateVelocity|RotateYaw|ScreenShake|SendFaceEvent|SendKillstreakDamageEvent|ServerFieldGetValue|ServerFieldIncrement|serverfieldregister|serverfieldsetval|ServerObjective_GetObjective|ServerObjective_GetObjectiveEntity|ServerObjective_GetObjectiveGameModeFlags|ServerObjective_GetObjectiveOrigin|ServerObjective_GetObjectiveProgress|ServerObjective_GetObjectiveTeam|ServiceEvent|ServiceEventsInRadius|SessionModeAbbreviation|SessionModeIsCampaignDeadOpsGame|SessionModeIsCampaignGame|SessionModeIsCampaignZombiesGame|SessionModeIsMultiplayerGame|SessionModeIsOnlineGame|SessionModeIsPrivate|SessionModeIsPrivateOnlineGame|SessionModeIsSystemlink|SessionModeIsZombiesGame|SetActorWeapon|SetAILimit|SetAISpread|SetAmbientSnapshot|SetAnim|SetAnimForceNew|SetAnimKnob|SetAnimKnobAll|SetAnimKnobAllLimited|SetAnimKnobAllLimitedRestart|SetAnimKnobAllRestart|SetAnimKnobLimited|SetAnimKnobLimitedRestart|SetAnimKnobRestart|SetAnimLimited|SetAnimLimitedRestart|SetAnimRestart|SetAnimTime|SetAnimTimeByName|SetArchive|SetAssassinationEnabled|SetAttachmentCosmeticVariantIndex|SetAttachmentCosmeticVariantIndexes|SetAttachmentCosmeticVariants|SetAvoidanceMask|SetAvoidanceProperty|SetBallPassAllowed|SetBeastModeIconMaterial|SetBGBCost|SetBlur|SetBlurByLocalClientNum|SetBodyRenderOptions|SetBodyRenderOptionsPacked|SetBombTimer|SetBurn|SetCameraSpikeActive|SetCanDamage|SetClearanceCeiling|SetClientNameMode|setclientsysstate|SetClone|SetCompassIcon|SetContents|SetCorpseGibState|SetCullDist|SetCursorHint|SetDamageDirectionIndicator|SetDangerous|SetDedicatedShadow|SetDefaultDropPitch|SetDemoIntermissionPoint|SetDepthOfField|SetDoubleJumpEnergy|SetDrawInfrared|SetDrawName|SetDrawOwnerName|SetDvar|SetDynEntBodyRenderOptionsPacked|SetDynEntEnabled|SetElectrified|SetEMPJammed|SetEnableNode|SetEnemyGlobalScrambler|SetEnemyModel|SetEnemyScramblerAmount|SetEntBeastModeIconType|SetEntGravityTrajectory|SetEntityAnimRate|SetEntityPaused|SetEntityWeapon|SetExcludeTeamForTrigger|SetExpFog|SetFakeFire|SetFlagAsAway|SetForceNoCull|SetForceNotSimple|SetFOVForKillcam|SetFriendlyNameDraw|SetFriendlyScramblerAmount|SetGameEndTime|SetGametypeSetting|SetGlobalFutz|SetGrapplableType|SetGravity|SetGroupSnapshot|SetHealthSnapshot|SetHideonClientWhenScriptedAnimCompleted|SetHideWhenScriptedAnimationCompleted|SetHighDetail|SetHintLowPriority|SetHintString|SetHintStringForPerk|SetHintStringForPlayer|SetIgnoreEntForTrigger|SetIgnorePauseWorld|SetIncludeMeshes|SetInfluenceAt|SetInfluencerTeamMask|SetInfluencerTimeout|SetInfraredVision|SetInfraredVisionSet|SetInitialPlayersConnected|setInTacticalHud|SetInvisibleToAll|SetInvisibleToPlayer|SetJumpHeight|SetLevelFadeSnapshot|SetLightColor|SetLightExponent|SetLightFovRange|SetLightingOnly|SetLightingState|SetLightIntensity|SetLightRadius|SetLocalRadarEnabled|SetLocalRadarPosition|SetLoopState|SetMapCenter|SetMapLatLong|SetMatchFlag|SetMatchTalkFlag|SetMaterialOverride|SetmaxHealth|SetMiniMap|SetMissileBrake|SetMissileCoasting|SetMissileOwner|SetMode|SetModel|SetMoveSpeedScale|SetMovingPlatformEnabled|SetNearestEnemyScrambler|SetNemesisXUID|SetNodePriority|SetNormalHealth|SetNoSunShadow|SetObjectivePointStatus|SetOnTargetAngle|SetOwner|SetPauseWorld|SetPerkForTrigger|SetPlayerCollision|SetPlayerCurrentObjective|SetPlayerCurrentStreak|SetPlayerGravity|SetPlayerIgnoreRadiusDamage|SetPlayerSpread|SetPlayerStateLoadoutBonusCards|SetPlayerStateLoadoutWeapons|SetRenderInThirdPersonSpectate|SetReviveHintString|SetRoundsPlayed|SetSAnim|SetScale|SetScanningPitch|SetScoreboardColumns|SetScriptMoverFlag|SetScriptStreamBias|SetSessStat|setshaderconstant|SetSharedViewPort|SetShowcaseWeaponPaintshopXUID|SetSkipTos|SetSlowMotion|SetSModelSAnimShot|SetSonarAttachmentEnabled|SetSoundContext|SetSoundEntContext|SetSoundPitch|SetSoundPitchRate|SetSoundVolume|SetSoundVolumeRate|SetSpawnClientFlag|SetSpawnPointRandomVariation|SetSpawnPointsBaseWeight|SetStableMissile|SetStance|SetStepTriggerSound|SetStowedWeapon|SetStreamerRequest|SetStunned|SetTargetEntity|SetTargetOrigin|SetTeam|SetTeamForTrigger|SetTeamReviveIcon|SetTeamSatellite|SetTeamScore|SetTeamSpyplane|SetThirdPerson|SetTmodeProvider|SetTopDownCameraYaw|SetTopScorer|SetTurretAccuracy|SetTurretCarried|SetTurretMinimapVisible|SetTurretNode|SetTurretOwner|SetTurretSpinning|SetTurretType|SetUnderwaterVisionSet|SetupClientFieldAnimSpeedCallbacks|setupclientfieldcodecallbacks|SetupClientFieldLuiCodeCallbacks|SetupFieldOpsKitLoadouts|SetViewAngleResistance|SetViewModelDepthOfField|SetVisibleToAll|SetVisibleToAllExceptTeam|SetVisibleToPlayer|SetVisibleToTeam|SetVisionSetForPlayer|SetVolFog|SetVoteNoCount|SetVoteString|SetVoteTime|SetVoteYesCount|SetWaterDisturbanceParams|SetWaterDrops|SetWaveWaterEnabled|SetWaveWaterGeneratorAmplitude|SetWaveWaterHeight|SetWeapon|SetWeaponCosts|SetWeaponOptions|SetWeaponRenderOptions|SetWinningPlayer|SetWinningTeam|SetWorldFogActiveBank|SetZBarrierColModel|SetZBarrierPieceState|SetZombieName|ShellShock|ShootTurret|ShootUp|ShouldDoInitialWeaponRaise|Show|ShowAllParts|ShowInfoVolume|ShowMiscModels|ShowPart|ShowToPlayer|ShowToTeam|ShowZBarrierPiece|SiegeCmd|SightConeTrace|SightTracePassed|SModelAnimCmd|SnapshotAcknowledged|Solid|SoundExists|SoundGetAlias|SoundGetPlaybackTime|SoundLineEmitter|SoundLoopEmitter|SoundPlayAutoFX|SoundPlaying|SoundRattle|SoundRattleSetup|SoundSetMusicState|SoundStopLineEmitter|SoundStopLoopEmitter|SoundTimeScale|SoundUpdateLineEmitter|Spawn|SpawnActor|SpawnCollision|spawndynent|SpawnFromSpawner|SpawnFX|SpawnHelicopter|SpawnNapalmGroundFlame|SpawnPathNode|SpawnPlane|SpawnStruct|SpawnTimedFX|SpawnTurret|SpawnVehicle|StartBinocs|StartFadingBlur|StartFiring|StartMission|StartPoisoning|StartRagdoll|StartResurrectViewAngleTransition|StopAllLoopSounds|StopAllRumbles|StopAnimScripted|StopBinocs|StopDemoRecording|StopFiring|StopForceStreamingMaterial|StopForceStreamingXModel|StopForcingStreamer|StopJukeMove|StopLoopSound|StopMission|StopMoveSlide|StopPoisoning|StopRumble|StopShellShock|StopShootTurret|StopSound|StopSounds|StreamerModelHint|StreamerNotify|StreamerRequest|StreamerSkiptoDebug|StreamTextureList|SubtitlePrint|SwitchMap_Load|SwitchMap_Preload|SwitchMap_SetLoadingMovie|SwitchMap_Switch|Target_BoundingIsUnderReticle|Target_ClearReticleLockOn|Target_GetArray|Target_GetOffset|Target_IsInCircle|Target_IsInRect|Target_IsTarget|Target_OriginIsInCircle|Target_Remove|Target_ScaleMinMaxRadius|Target_Set|Target_SetAllowHighSteering|Target_SetAttackMode|Target_SetJavelinOnly|Target_SetOffscreenShader|Target_SetOffset|Target_SetShader|Target_SetTurretAquire|Target_StartReticleLockOn|TestSpawnPoint|TmodeSetServerUser|ToggleNoVehicleFaceTraversability|TracePassedOnNavMesh|TracePoint|TriggerEnable|TriggerFX|TriggerIgnoreTeam|Underwater|Unlink|UnlinkNodes|UnlinkTraversal|UnloadSiegeAnim|UnlockSongByAlias|UnSetTurretNode|UpdateClientNames|UpdateNavTriggers|UpdateUnlockedAttachmentBits|UseAlternateAimParams|UseAlternateHud|UseAnimTree|UseBuildKitWeaponModel|UseBy|UseServerVisionset|UseTriggerIgnoreUseHoldTime|UseTriggerRequireLookAt|UseTriggerRequireLookToward|UseWeaponHideTags|UseWeaponModel|Vibrate|VideoPause|VideoPrime|VideoStart|VideoStop|VideoUnpause|ViewKick|ViewmodelHasTag|VisionSetLastStand|VisionSetLerpRatio|VisionSetNaked|VrIsActive|WalkUnderwater|WeaponCyclingEnabled|WeaponFriendlyHacking|WeaponHasAttachment|WeaponHasAttachmentAndUnlocked|WorldEntNumber|WorldToLocalCoords|WorldTrace|ZBarrierGetPiece|ZBarrierPieceUseAlternateModel|ZBarrierPieceUseAttachWeapon|ZBarrierPieceUseBoxRiseLogic|ZBarrierPieceUseDefaultModel|ZBarrierPieceUseUpgradedModel|ZBarrierSupportsZombieReachThroughAttacks|ZBarrierSupportsZombieTaunts|ZeroGravityVolumeOff|ZeroGravityVolumeOn|AddSentientEventListener|aithrowgrenade|AllowPitchAngle|AnimMode|AtDangerousNode|AttackedRecently|CalcApproximatePathToPosition|CalcLookaheadPos|CanAttackEnemyNode|CanSee|CanShoot|CanShootEnemy|CanThrowGrenade|CanThrowGrenadePos|CheckGrenadeThrow|CheckGrenadeThrowPos|CheckProne|ChooseBetterCoverNode|ClearEnemy|ClearEntityOwner|ClearEntityTarget|ClearFixedNodeSafeVolume|ClearForcedGoal|ClearGoalVolume|ClearPath|ClearPitchOrient|ClearPotentialThreat|ClearUsePosition|CollideWithActors|CreateThreatBiasGroup|DamageMode|DropWeapon|FindBestCoverNode|FindBestCoverNodes|FindCoverNodeAtLocation|FindReacquireDirectPath|FindReacquireNode|FindReacquireProximatePath|FinishActorDamage|ForceTeleport|GenerateRadioEvent|GetAimLimitsFromEntry|GetBehaviorTreeStatus|GetClosestEnemySqDist|GetDropToFloorPosition|GetFinalPathPos|GetFireMode|GetFixedNodeSafeVolume|GetFlashBangedStrength|GetGoalVolume|GetGroundEntType|GetHitEntType|GetHitYaw|GetIgnoreEnt|GetNextFindBestCoverTime|GetNodeOffsetAngles|GetNodeOffsetPosition|GetOrientMode|GetPathLength|GetPathMode|GetPerfectInfo|GetPersonalThreatBias|GetReacquireNode|GetStealthSightValue|GetThreatBias|GetThreatBiasGroup|GetTurnExitYaw|GrenadeThrow|HasPath|HasValidInterrupt|IsActorShooting|IsApproachingGoal|IsAtCoverNode|IsAtCoverNodeStrict|IsAtGoal|IsBadGuy|IsCoverValid|IsCurrentBTActionLooping|IsDeflected|IsFlankedAtCoverNode|IsGrenadePosSafe|IsInAnyBadPlace|IsInGoal|IsInScriptedState|IsKnownEnemyInRadius|IsKnownEnemyInVolume|IsMoveSuppressed|IsNoTarget|IsPathDirect|IsPosAtGoal|IsPosInClaimedLocation|IsSafeFromGrenade|IsStanceAllowed|IsSuppressed|IsSuppressionWaiting|IsThreateningMyProtectEntity|Knockback|LastKnownPos|LastKnownTime|LerpPosition|MayMoveFromPointToPoint|MayMoveToPoint|Melee|MeleeWithOffset|NearClaimNode|NearClaimNodeAndAngle|NearNode|OrientMode|PathMode|PickUpGrenade|PredictArrival|PredictExit|PredictPath|PushPlayer|ReacquireMove|ReacquireStep|RemoveSentientEventListener|ResetVisibilityCacheWithinRadius|SeeRecently|SetEntityOwner|SetEntityTarget|SetFixedNodeSafeVolume|SetFlashBanged|SetFlashbangImmunity|SetFreeCameraLockOnAllowed|SetGoal|setgoalentity|setgoalnode|setgoalpos|setgoalvolume|setgoalvolumeauto|SetIgnoreEnt|SetIgnoreMeGroup|SetPersonalIgnore|SetPersonalThreatBias|SetPhysParams|SetPitchOrient|SetPotentialThreat|SetRepairPaths|SetStairsExitTransform|SetStealthSight|SetStealthSightAwareness|SetStealthSightValue|SetSteeringMode|SetThreatBias|SetThreatBiasAgainstAll|SetThreatBiasGroup|Shoot|ShouldFaceMotion|ShouldHoldGroundAgainstEnemy|ShouldStartArrival|ShouldStartTraversal|ShouldUseCoverNode|StartCoverArrival|Teleport|ThreatBiasGroupExists|TraverseMode|TrimPathtoAttack|UseCoverNode|UsePosition|UseReacquireNode|AddBoltedFXExclusionVolume|AddDuplicateRenderOption|AddFXExclusionVolume|BeamKill|BeamLaunch|BulletTracer|CaptureFrame|ClearExtraCam|codeplaypostfxbundle|codestoppostfxbundle|CreateSceneCodeImage|DeleteFX|DisableDuplicateRendering|EnableFrontendLockedWeaponOverlay|EnableFrontendStreamingOverlay|EnableFrontendTokenLockedWeaponOverlay|EnableThermalDraw|EVEnable|EvStatus|FindStaticModelIndex|FindStaticModelIndexArray|FindVolumeDecalIndexArray|FreeCodeImage|GetCameraSpikeCamStatic|GetFXFromSurfaceTable|GetServerVolumetricFogDensity|GetSurfaceStrings|GetVisionSetNaked|GetWorldFogScriptID|HideStaticModel|HideVolumeDecal|IGCActive|IsFXPlaying|IsIGCActive|IsStereoOn|KillFX|KillRadiantExploder|MakeLight|MapMaterialIndex|MotionPulse_Enable|MotionPulse_SetDesat|MotionPulse_SetFadeOut|MotionPulse_SetFalloff|MotionPulse_SetLineWidth|MotionPulse_SetOutline|MotionPulse_SetRadius|MotionPulse_SetSolid|OED_NightVision_Enable|OED_NightVision_Reset|OED_NightVision_SetTextureLevel|OED_SitRepScan_Enable|OED_SitRepScan_SetDesat|OED_SitRepScan_SetFalloff|OED_SitRepScan_SetLineWidth|OED_SitRepScan_SetOutline|OED_SitRepScan_SetRadius|OED_SitRepScan_SetSolid|PlayExtraCamXCam|PlayFXOnDynEnt|PlayMainCamXCam|PlayRadiantExploder|PlayRenderOverrideBundle|PlayTagFXSet|PlayViewmodelFX|RandomFade|RegisterRewindFX|RemoveFXExclusionVolume|SetAllowXCamRightStickRotation|SetArmPulse|SetArmPulsePosition|SetCameraSpikeCamActive|SetCameraSpikeCamAngles|SetCameraSpikeCamEntity|SetCameraSpikeCamOrigin|SetCameraSpikeCamStatic|SetClientVolumetricFog|SetExposureActiveBank|SetExposureIgnoreTeleport|SetExposureInstantSnap|SetExtraCam|SetExtraCamFocalLength|SetFilterBitFlag|SetFilterPassCodeTexture|SetFilterPassConstant|SetFilterPassEnabled|SetFilterPassMaterial|SetFilterPassQuads|SetFXIgnorePause|SetFXOutdoor|SetFXTeam|SetGenericSceneValue|SetHotZone|SetLitFogBank|SetLutScriptIndex|SetLutVolumeActiveBank|SetOverlayConstant|SetOverlayEnabled|SetOverlayMaterial|SetPBGActiveBank|SetRimIntensity|SetRippleWave|SetServerVolumetricFogDensity|SetUkkoScriptIndex|StartWaterSheetingFX|StopExtraCamXCam|StopFX|StopMainCamXCam|StopRadiantExploder|StopRenderOverrideBundle|StopWaterSheetingFX|SwitchToClientVolumetricFog|SwitchToServerVolumetricFog|TmodeClearFlag|TmodeEnable|TmodeSetFlag|TmodeStatus|umbra_clearpersistenttometrigger|Umbra_SetAccurateOcclusionThreshold|Umbra_SetDistanceScale|Umbra_SetMinimumContributionThreshold|umbra_settometrigger|umbra_settometriggeronce|UnhideStaticModel|UnhideVolumeDecal|VisionSetLastStandLerp|VisionSetNakedLerp|WeakPoint_Enable|ZombieShooterSpotted|Abs|AbsAngleClamp180|AbsAngleClamp360|ACos|AngleClamp180|AngleLerp|AnglesToForward|AnglesToRight|AnglesToUp|ASin|ATan|Ceil|Closer|CombineAngles|Cos|DiffTrack|DiffTrackAngle|Distance|Distance2D|Distance2DSquared|DistanceSquared|Float|Floor|ForwardRotateAroundUpByAngle|GetMinBitCountForNum|Int|Length|LengthSquared|LerpFloat|LerpVector|Log|MapFloat|Max|Min|PackRgba|PointOnSegmentNearestToPoint|Pow|Project2Dto3D|Project3Dto2D|RandomFloat|RandomFloatRange|RandomInt|RandomIntRange|RotatePoint|RotatePointAroundAxis|Sin|Sqrt|Tan|VectorCross|VectorDot|VectorFromLineToPoint|VectorLerp|VectorNormalize|VectorProjection|VectortoAngles|ViewAspect|ActionButtonPressed|ActionSlotFourButtonPressed|ActionSlotOneButtonPressed|ActionSlotThreeButtonPressed|ActionSlotTwoButtonPressed|AddToDamageIndicator|AdsButtonPressed|AllowAds|AllowCrouch|AllowDoubleJump|AllowJump|AllowLean|AllowMelee|AllowMeleePowerLeft|AllowProne|AllowSlide|AllowSpectateTeam|AllowSprint|AllowStand|AllowWallRun|AnyAmmoForWeaponModes|ApplyKnockBack|AreControlsFrozen|AttackButtonPressed|BeginLocationAirstrikeSelection|BeginLocationArtillerySelection|BeginLocationComlinkSelection|BeginLocationMortarSelection|BeginLocationNapalmSelection|BeginLocationSelection|BoostButtonPressed|BotSetRandomCharacterCustomization|ButtonBitState|ButtonPressed|CalcPlayerOptions|CalcWeaponOptions|CameraActivate|CameraSetAngles|CameraSetLookAt|CameraSetPosition|CanPlaceRiotshield|CanPlayerPlaceTurret|CanPlayerPlaceVehicle|CantSeeEntities|CarryTurret|ChangeSeatButtonPressed|ClearDamageIndicator|ClearPerks|ClonePlayer|CloseInGameMenu|CloseLUIMenu|CloseMenu|CreateFlashbackClone|DamageRiotShield|DeathStreakActive|DisableDeathStreak|DisableInvulnerability|DisableOffhandWeapons|DisableRoundStartDelay|DisableUsability|DisableWeaponCycling|DisableWeaponFire|DisableWeapons|DropItem|DropScavengerItem|EnableDeathStreak|EnableInvulnerability|EnableOffhandWeapons|EnableRoundStartDelay|EnableUsability|EnableWeaponCycling|EnableWeaponFire|EnableWeapons|EndLocationSelection|FakeDamageFrom|finishMeleeHit|FinishPlayerDamage|ForceGrenadeThrow|ForceOffHandEnd|ForceSlick|FragButtonPressed|FreezeControls|FreezeControlsAllowLook|GamepadUsedLast|GetCharacterBodyModel|GetCharacterBodyRenderOptions|GetCharacterBodyType|GetCharacterHeadModel|GetCharacterHelmetModel|GetControllerUIModelValue|GetCurrentOffHand|GetCurrentWeapon|GetCurrentWeaponAltWeapon|GetCurrentWeaponSpinLerp|GetEnemyDogTagModel|GetFractionMaxAmmo|GetFractionStartAmmo|GetFriendlies|GetFriendlyDogTagModel|GetGunAngles|GetHeroAbilityName|GetHeroWeaponName|GetInventoryHeldWeapon|GetInventoryWeapon|GetIpAddress|GetLeagueTeamID|GetLightingState|GetLockOnLossRadius|GetLockOnOrigin|GetLockOnRadius|GetLockOnSpeed|GetLUIMenu|GetLUIMenuData|GetMpDialogName|GetNormalizedCameraMovement|GetNormalizedMovement|GetOffHandSecondaryClass|GetPerks|GetPlayerAngles|GetPlayerAttachmentCosmeticVariantIndexes|GetPlayerCameraPos|GetPlayerGenderType|GetPlayerMovementState|GetPlayerSelectedGesture|GetPlayerSelectedTaunt|GetPlayerShowcaseWeapon|GetPlayerViewHeight|getreplaygunlockonorigin|GetSnapshotAckIndex|GetSunShadowSplitDistance|GetTargetScreenAngles|GetVehicleBoostTime|GetVehicleBoostTimeLeft|GetVehicleFocusEntity|GetVehicleMinBoostTime|GetVehicleOccupied|GetWeaponAcvi|GetWeaponAmmoClip|GetWeaponAmmoFuel|GetWeaponAmmoStock|GetWeaponForWeaponRoot|GetWeaponOptions|GetWeaponsList|GetWeaponsListPrimaries|GiveDedicatedShadow|GiveMaxAmmo|GiveNextBaseWeapon|GiveStartAmmo|GiveWeapon|GiveWeaponNextAttachment|HasAGrenadePulledBack|HasMaxPrimaryWeapons|HasPerk|HasRiotShield|HasWeapon|HideViewModel|InitialWeaponRaise|InventoryButtonPressed|IsCarryingTurret|IsChargeShotPending|IsDroppingWeapon|IsFiring|IsGrappling|IsHost|IsHostForBots|IsInMoveMode|IsInVehicle|IsLocalToHost|IsLookingAt|IsMeleeing|IsPlayerOnSameMachine|IsReloading|IsRemoteControlling|IsSwitchingWeapons|IsTalking|IsThrowingGrenade|IsUsingOffHand|IsWeaponOverheating|IsWeaponViewOnlyLinked|JumpButtonPressed|LinkGuidedMissileCamera|LinkToMissile|MeleeButtonPressed|MurderLine|NextPlayerRenderOption|OffhandSpecialButtonPressed|OpenLUIMenu|OpenMenu|OpenMenuNoMouse|PickupAmmoEvent|PickupWeaponEvent|PingPlayer|PlayBombDefuse|PlayBombPlant|PlayClientAirstrike|PlayClientNapalm|PlayerADS|PlayerKnockback|PlayHitMarker|PlayLocalSound|PrimaryButtonPressedLocal|PrimeMovie|ReloadButtonPressed|ReloadWeaponAmmo|RemoteControlTurret|RemoteControlTurretOff|ResetAnimations|ResetCharacterCustomization|ResetFlashBack|ResetSpreadOverride|Revive|RevivePlayer|SayAll|SayTeam|SecondaryButtonPressedLocal|SecondaryOffhandButtonPressed|SetActionSlot|SetArenaPoints|SetBlockWeaponPickup|SetCarryingObject|SetCharacterBodyStyle|SetCharacterBodyType|SetCharacterHelmetStyle|SetClientCGObjectiveText|SetClientCompass|SetClientDrawTalk|SetClientFocalLength|SetClientHUDHardcore|SetClientMiniScoreboardHide|SetClientNumLives|SetClientPlayerPushAmount|SetClientPlayerSprintTime|SetClientScriptMainMenu|SetClientThirdPerson|SetClientThirdPersonAngle|SetClientUIVisibilityFlag|SetControllerUIModelValue|SetCurrentSpectatorClient|SetCurrentWeaponSpinLerp|SetDisabledTargetHint|SetElectrifiedState|SetEnterTime|SetEverHadWeaponAll|SetHighlighted|SetInventoryHeldWeapon|SetInventoryWeapon|SetLowReady|SetLUIMenuData|SetModelLodBias|SetNoLOSOnTargetsHint|SetNoTargetsHint|setOffhandPrimaryClass|SetOffhandSecondaryClass|SetOffhandVisible|SetOrigin|SetParagonIconId|SetParagonRank|SetPerk|SetPlacementHint|SetPlayerAngles|SetPlayerRenderOptions|SetRank|SetRiotshieldFailHint|SetSpawnWeapon|SetSpreadOverride|SetSprintCooldown|SetSprintDuration|SetSunShadowSplitDistance|SetTacticalWheel|SetTargetAlreadyInUseHint|SetTargetAlreadyTargetedHint|SetTargetedEntityEndTime|SetTargetedMissilesRemaining|SetTargetingAbortedHint|SetTargetOORHint|SetTargetWrongTypeHint|SetVehicleDamageMeter|SetVehicleDrivableDuration|SetVehicleDrivableEndTime|SetVehicleFocusEntity|SetVehicleLockedOnByEnt|SetVehicleWeaponWaitDuration|SetVehicleWeaponWaitEndTime|SetVelocity|SetViewClamp|SetWeaponAmmoClip|SetWeaponAmmoFuel|SetWeaponAmmoStock|SetWeaponFriendlyHacking|SetWeaponFriendlyTargeting|SetWeaponFriendlyTargetLocked|SetWeaponHackPercent|SetWeaponHeatPercent|SetWeaponLockOnPercent|SetWeaponOverheating|ShowViewModel|SortHeldWeapons|SpawnSpectator|SprintButtonPressed|SprintUpRequired|StanceButtonPressed|StartCameraTween|StartRevive|StopCarryTurret|StopLocalSound|StopRevive|Suicide|SwitchToOffHand|SwitchToWeapon|SwitchToWeaponImmediate|TakeAllWeapons|TakeWeapon|ThrowButtonPressed|TurnedHuman|UndoLastStand|UnlinkFromMissile|UnlinkGuidedMissileCamera|UnSetPerk|UpdateWeaponOptions|UseButtonPressed|VehicleMoveUpButtonPressed|WeaponLockCount|WeaponLockDetect|WeaponLockFinalize|WeaponLockFree|WeaponLockNoClearance|WeaponLockRemoveSlot|WeaponLockStart|WeaponLockTargetTooClose|WeaponPlayEjectBrass|WeaponSwitchButtonPressed|ChangeFontScaleOverTime|ClearTargetEnt|CloseLUIMenu|CreateLUIMenu|CreateUIModel|Destroy|FadeOverTime|FreeUIModel|GetGlobalUIModel|GetLUIMenu|GetLUIMenuData|GetTextWidth|GetUIModel|GetUIModelForController|GetUIModelValue|IsLuiEnabled|LuiDisable|LuiEnable|LuiLoad|MoveOverTime|NewClientHudElem|NewDamageIndicatorHudElem|NewDebugHudElem|NewHudElem|NewScoreHudElem|NewTeamHudElem|OpenLUIMenu|OpenLUIPopup|PopulateScriptDebugMenu|Reset|ScaleOverTime|SetClock|SetClockUp|SetCOD7DecodeFX|SetExtraCamRenderReady|SetGameTypeString|SetLUIMenuData|SetMapNameString|SetPerks|SetPlayerNameString|SetPulseFX|SetRedactFX|SetShader|SetTargetEnt|SetTenthsTimer|SetTenthsTimerUp|SetText|SetTimer|SetTimerUp|SetTypewriterFX|SetUIModelValue|SetValue|SetWarGameData|SetWayPoint|array|ArrayCombine|ArrayCopy|ArrayGetClosest|ArrayGetFarthest|ArrayInsert|ArrayIntersect|ArrayRemoveIndex|ArrayRemoveValue|Assert|AssertMsg|associativeArray|ClientHasSnapshot|ErrorMsg|GetArrayKeys|GetAttachmentTableIndex|GetDvarFloat|GetDvarInt|GetDvarString|GetDvarVector|GetFirstArrayKey|GetItemIndexFromRef|GetLastArrayKey|GetMapCenter|GetNextArrayKey|GetPrevArrayKey|GetServerTime|GetSubStr|GetSystemTime|IsArray|IsClass|IsFloat|IsFunctionPtr|IsInArray|IsInt|IsMatureContentEnabled|IsShowBloodEnabled|IsShowGibsEnabled|IsString|IsStruct|IsSubStr|istring|IsVec|IsWeapon|MakeLocalizedString|SplitArgs|sprintf|StrEndsWith|StrIsFloat|StrIsInt|StrIsNumber|StrStartsWith|StrStrip|StrTok|StrTok2|TableLookup|TableLookupColumnCount|TableLookupColumnForRow|TableLookupFindCoreAsset|TableLookupIString|TableLookupRow|TableLookupRowCount|TableLookupRowNum|Throw|ToLower|ToUpper|AttachPath|CancelAIMove|ClearDefaultPitch|ClearGoalYaw|ClearGunnerTarget|ClearLookAtEnt|ClearTargetYaw|ClearTurretTarget|ClearVehGoalPos|CreateTrack|DisableDriverFiring|DisableGunnerFiring|DrawTrajectory|DrivePath|FinishVehicleDamage|FinishVehicleRadiusDamage|FireWeapon|Flip180|FreeVehicle|GetAllVehicleNodes|GetAngularVelocity|GetAttachPos|GetBrake|GetDefaultAcceleration|getgoalspeedMPH|GetGoalYaw|GetGunnerTargetEnt|GetGunnerTargetVec|GetHandBrake|GetHeliHeightLock|GetHeliHeightLockHeight|GetMaxSpeed|GetNumVehicles|GetOccupantSeat|GetPathFixedOffset|GetPathVariableOffset|GetPhysAcceleration|GetScriptBrake|GetSeatFiringAngles|GetSeatFiringOrigin|GetSeatOccupant|GetSpeed|GetSpeedMPH|GetSteering|GetThrottle|GetTimeFromVehicleNodeToNode|GetTurretHeatValue|GetTurretLimitsYaw|GetTurretTargetVec|GetVehDamageMultiplier|GetVehicleAvoidance|GetVehicleAvoidanceNodes|GetVehicleNode|GetVehicleNodeArray|GetVehicleOwner|GetVehOccupants|GetWheelSurface|IsDriverFiring|IsGunnerFiring|IsInsideHeliHeightLock|isremotecontrol|IsTurretReady|IsVehicleImmuneToDamage|IsVehicleManualControl|IsVehicleSeatOccupied|IsVehicleTurretOverheating|IsVehicleUsable|JoltBody|MakeVehicleUnusable|MakeVehicleUsable|PathFixedOffset|PathFixedOffsetClear|PathMove|PathMoveClear|PathVariableOffset|PathVariableOffsetClear|RecalcSplinePaths|ReconnectVehicleNodes|ResetVehicleFromDropDeploy|ResumeSpeed|ReturnPlayerControl|SeatGetWeapon|SetAcceleration|SetAirResistance|SetAngularVelocity|SetBrake|SetBuoyancyOffset|SetDamageStage|SetDeceleration|SetDefaultPitch|SetDrivePathPhysicsScale|SetGoalYaw|SetGunnerTargetEnt|SetGunnerTargetVec|SetGunnerTurretOnTargetRange|SetHeliDogfighting|SetHeliHeightCap|SetHeliHeightLock|SetHeliHeightPatchEnabled|SetHoverParams|SetJitterParams|SetLookAtEnt|SetLookAtOrigin|SetMantleEnabled|SetMaxAccelerationScale|SetMaxPitchRoll|SetMaxSpeedScale|SetMinDesiredTurnYaw|SetNearGoalNotifyDist|SetPathTransitionTime|SetPhysAcceleration|SetPhysAngles|SetPlaneBarrelRoll|SetPlaneGoalPos|SetRotorSpeed|SetSeatOccupied|SetSpeed|SetSpeedImmediate|SetSwitchNode|SetTargetYaw|SetTurningAbility|SetTurretTargetEnt|SetTurretTargetRelativeAngles|SetTurretTargetVec|SetVehGoalPos|SetVehicleAvoidance|SetVehicleForDropDeploy|SetVehicleManualControl|SetVehicleType|SetVehMaxSpeed|SetVehVelocity|SetVehWeapon|SetYawSpeed|StartPath|StopFireWeapon|SwitchStartNode|TakePlayerControl|UseVehicle|VehDriverAimAtCrosshairs|EnumerateWeapons|Missile_CreateAttractorEnt|Missile_CreateAttractorOrigin|Missile_CreateRepulsorEnt|Missile_CreateRepulsorOrigin|Missile_DeleteAttractor|GetDStat|ClearAllCharacterTables|IsCybercomIndexEnabled|ModVar|PrintTopRightln|SetPlayerCybercomAbility|adddebugcommand|adddstat|addgametypestat|addgoal|addmissionstat|addplayerstat|addplayerstatwithgametype|addrankxp|addrankxpvalue|addsessstat|addspecialiststat|addunlocktoken_attachment|addunlocktoken_weapon|addweaponstat|aiprofile_beginentry|aiprofile_endentry|allowattack|allowbottargetting|animcustom|animgetchildat|animgetnumchildren|animhasimportantnotifies|arenabeginmatch|arenaendmatch|asmchangeanimmappingtable|asmgetcurrentdeltaanimation|asmgetcurrentstate|asmgetstatus|asmisaimlayeractive|asmisshootlayeractive|asmissubstatepending|asmisterminating|asmistransdecrunning|asmistransitionrunning|asmrequestsubstate|astsearch|atgoal|awarenesssetweaponshotdistance|awarenessupdatepoolthresholds|bb_getarrivalstance|bb_getcurrentexposedtype|bb_getlocomotionarrivaldistance|bb_getlocomotionarrivalyaw|bb_getlocomotionmotionangle|bb_getlocomotionturnyaw|bbclasschoice|bbpostdemostreamstatsforround|bbprint|botclassaddattachment|botclassadditem|botclasssetweaponoption|botdropclient|botleavegame|botpressbutton|botpressbuttonforgadget|botreleasebutton|botreleasebuttons|botreleasemanualcontrol|botsetdefaultclass|botsetfailsafenode|botsetlookangles|botsetmovemagnitude|botsighttrace|botsighttracepassed|botswitchtoweapon|bottakemanualcontrol|bottapbutton|botundermanualcontrol|box|calcpathlength|cancelgoal|checkpointclear|checkpointcommit|checkpointcreate|checkpointrestore|circle|clearallnoncheckpointdata|clearlookat|clearnoncheckpointdata|closefile|debugbreak|debugstar|docowardswayanims|enablelobbyjoins|enableoccluder|enablevr|endlobby|execdevgui|fgetarg|finalizeMatchRecord|finalizetrackedblackboardattributes|finishtraversal|flagenemyunattackable|fprintfields|fprintln|freadln|freerunsethighscores|gamehistoryfinishmatch|gamehistorystartmatch|gamemodeisarena|gamemodeisusingstats|gamemodeisusingxp|gamerepthresholdexceeded|getactivecontractprogress|getactivecontracttimepassed|getanglestolikelyenemypath|getanimfromasd|getanimhasnotetrackfromasd|getanimlengthfromasd|getanimstatefromasd|getanimsubstatecountfromasd|getanimsubstatefromasd|getbgbremaining|getbgbtokensgained|getbgbtokensremaining|getbgbtokensused|getbubblegumpack|getcontractrewardcp|getcontractrewardxp|getcontractstatname|getcontractstattype|getdeltaturnyaw|getdemofileid|getdlcavailable|getdstatarraycount|getenemyinfo|getenemyvelocity|getgoal|getguid|gethostmigrationarraycount|gethostmigrationvalue|getindexforactivecontract|getlocalprofilearrayint|getlocalprofilefloat|getlocalprofileint|getlocalprofilestring|getlookaheaddir|getlookaheaddist|getmatchrecordlifeindex|getmaxactivecontracts|getmotionangle|getnavfaceregion|getnoncheckpointdata|getsessstat|getsessstatarraycount|getthreats|getxpscale|getxuid|ghostindemo|giveachievement|givedecoration|givemissingunlocktokens|giveunlocktoken|hasactivecontractexpired|hasanimstatefromasd|hascollectedallcollectibles|hascompletedallgamechallenges|hasdlcavailable|hasgoal|hashstring|hasseasonpass|hkaigettimertestpathfindendpos|hkaigettimertestpathfindstartpos|hkaisettimertestent|incrementactivecontractprogress|incrementactivecontracttime|incrementbgbtokensgained|incrementbgbtokensused|incrementlifestat|incrementplayerstat|invalidatematchrecord|isactivecontractcomplete|isanimleaf|isanimloaded|isitemlocked|isitempurchased|isitemrestricted|ispc|ispointonstairs|isprofilebuild|isspecialistunlocked|launchbomb|line|linelist|logprint|lookat|matchRecordRoundEnd|matchrecorderincrementheaderstat|matchrecordgetweaponindex|matchrecordincrementcheckpointstat|matchrecordlogadditionaldeathinfo|matchrecordlogchallengecomplete|matchrecordlogcybercoreevent|matchrecordlogspecialmovedataforlife|matchrecordnewplayer|matchrecordplayerspawned|matchrecordsetcheckpointstat|matchrecordsetcurrentlevelcomplete|matchrecordsetleveldifficultyforindex|openfile|pixbeginevent|pixendevent|pixmarker|pressads|pressattackbutton|pressdtpbutton|pressmelee|pressusebutton|print3d|profilelog_begintiming|profilelog_endtiming|ratrecordmessage|ratreportcommandresult|record3dtext|recordcareerflag|recordcareerflagformap|recordcareerstat|recordcareerstatformap|recordcircle|recordcomscoreevent|recordcone|recordent|recordenttext|recorderplayback|recordgameevent|recordgameeventnonplayer|recordgameresult|recordkillmodifier|recordkillstreakassist|recordkillstreakendevent|recordkillstreakevent|recordleaguepreloser|recordleaguewinner|recordline|recordloadoutindex|recordloadoutperksandkillstreaks|recordmapevent|recordmatchbegin|recordmatchinit|recordmatchsummaryzombieendgamedata|recordmedal|recordmultikill|recordnumzombierounds|recordplayerdeathzombies|recordplayerdownzombies|recordplayermatchend|recordplayerrevivezombies|recordplayerstats|recordsphere|recordstar|recordusedspawnpoint|recordzombiegumballevent|recordzombieroundend|recordzombieroundstart|recordzombiezone|registerxp|rejack|reportlootconsume|reportlootreward|reportmtu|reportstubusage|resetactivecontractprogress|resetinactivitytimer|resetqosgamedatapayload|resettimeout|savegame_create|savegame_getsavedmap|savegame_getsavedqueuedmap|savegame_resetcampaignprogress|setaarstat|setallcontrollerslightbarcolor|setanimstate|setanimstatefromasd|setclientprofilevar|setcontrollerlightbarcolor|setcybercomability|setdebugsideswitch|setdstat|setflaggedanim|setflaggedanimknob|setflaggedanimknoball|setflaggedanimknoballrestart|setflaggedanimknoblimited|setflaggedanimknoblimitedrestart|setflaggedanimknobrestart|setflaggedanimlimited|setflaggedanimlimitedrestart|setflaggedanimrestart|sethostmigrationstatus|sethostmigrationvalue|setlaststandprevweap|setlocalprofilearrayvar|setlocalprofilevar|setnoncheckpointdata|setplayercharacter|setqosgamedatapayload|setsaveddvar|settalktospecies|showindemo|skillupdate|sphere|sphericalcone|starthostmigration|throwgrenade|trackblackboardattribute|trackheropoweractivated|trackheropoweravailable|trackheropowerexpired|trackweaponfirenative|umbragate_set|updatestatratio|updatetrackedblackboardattribute|uploadleaderboards|uploadstats|usealternatereviveicon|vehcansee|vehclearenemy|vehseenrecently'

  # all T7 base-game namespaces (not including cp/mp)
  namespace: 'zm_shadow_zombie|bouncingbetty|zm_weap_staff_air|global_fx|zm_altbody|zm_score|radiant_live_udpate|zm|_zm_weap_gravityspikes|zm_altbody_beast|_zm_weap_elemental_bow_storm|zm_powerup_carpenter|_zm_weap_beacon|_claymore|zm_ai_spiders|zm_ai_wasp|zm_powerup_genesis_random_weapon|zm_perk_juggernaut|zm_weap_staff_water|zm_perks|zm_powerup_double_points|zm_ai_dogs|zm_powerups|zm_weap_microwavegun|zm_ai_raps|zm_powerup_insta_kill|zm_audio|zm_ai_sonic|_zm_demo|zm_equip_shield|zm_powerup_bonus_points_player|zm_powerup_free_perk|_zm_weap_elemental_bow_wolf_howl|zm_equipment|zm_perk_widows_wine|zm_ai_spiders|zm_ai_sentinel_drone|zm_traps|zm_perk_deadshot|zm_fog|zm_magicbox_zod|ball|zm_weap_shrink_ray|_sticky_grenade|zm_equip_turret|zm_perk_electric_cherry|zm_perk_sleight_of_hand|zm_craftables|zm_craft_shield|zm_elemental_zombie|zm_powerup_full_ammo|zm_powerup_nuke|filter|zm_ai_mechz|idgun|zm_playerhealth|controllable_spider|zm_utility|zm_perk_quick_revive|zm_perk_doubletap2|weaponobjects|zclassic|_zm_weap_elemental_bow_rune_prison|_zm_weap_tesla|_zm_weap_octobomb|zm_zdraw|zm_magicbox|zm_weap_staff|zm_weap_black_hole_bomb|zm_powerup_island_seed|zm_powerup_shield_charge|zm_powerup_zombie_blood|dragon_strike|zm_radio|_zm_weap_elemental_bow_demongate|zm_weap_staff_fire|zm_weapons|_zm_pack_a_punch|zm_perk_staminup|zm_light_zombie|load|ambient|_zm_weap_raygun_mark3|zm_powerup_free_perk|zm_equip_gasmask|zm_ai_raz|zm_weap_staff_lightning|zm_ai_quad|destructible|zm_powerup_weapon_minigun|mirg2000|zm_trap_fire|zm_ffotd|callback|bgb_machine|_zm_weap_cymbal_monkey|zm_bgb_now_you_see_me|zm_bgb_kill_joy|zm_bgb_danger_closest|zm_bgb_on_the_house|zm_bgb_mind_blown|zm_bgb_board_games|zm_bgb_whos_keeping_score|zm_bgb_unquenchable|zm_bgb_extra_credit|zm_bgb_arsenal_accelerator|zm_bgb_reign_drops|zm_bgb_respin_cycle|zm_bgb_arms_grace|zm_bgb_wall_power|zm_bgb_lucky_crit|zm_bgb_disorderly_combat|zm_bgb_licensed_contractor|zm_bgb_idle_eyes|zm_bgb_immolation_liquidation|zm_bgb_firing_on_all_cylinders|zm_bgb_power_vacuum|zm_bgb_armamental_accomplishment|zm_bgb_projectile_vomiting|zm_bgb_flavor_hexed|zm_bgb_self_medication|zm_bgb_alchemical_antithesis|zm_bgb_perkaholic|zm_bgb_soda_fountain|zm_bgb_tone_death|zm_bgb_burned_out|zm_bgb_newtonian_negation|zm_bgb_eye_candy|zm_bgb_impatient|zm_bgb_near_death_experience|zm_bgb_sword_flay|zm_bgb_coagulant|zm_bgb_aftertaste|zm_bgb_fatal_contraption|zm_bgb_stock_option|zm_bgb_always_done_swiftly|zm_bgb_head_drama|zm_bgb_crate_power|zm_bgb_bullet_boost|zm_bgb_dead_of_nuclear_winter|zm_bgb_unbearable|zm_bgb_ephemeral_enhancement|zm_bgb_shopping_free|zm_bgb_crawl_space|zm_bgb_in_plain_sight|zm_bgb_round_robbin|zm_bgb_killing_time|zm_bgb_board_to_death|zm_bgb_temporal_gift|zm_bgb_secret_shopper|zm_bgb_slaughter_slide|zm_bgb_fear_in_headlights|zm_bgb_im_feelin_lucky|zm_bgb_anywhere_but_here|zm_bgb_profit_sharing|zm_bgb_cache_back|zm_bgb_phoenix_up|zm_bgb_undead_man_walking|zm_bgb_pop_shocks|bgb|zm_powerup_bonus_points_team|zm_audio_zhd|zm_powerup_demonic_rune|_zm_weap_one_inch_punch|zm_weap_elemental_bow|zm_laststand|electroball_grenade|zm_powerup_beast_mana|zm_weap_dragon_gauntlet|zm_perk_additionalprimaryweapon|_zm_ai_monkey|zm_weap_thundergun|zm_powerup_castle_tram_token|zodcompanionclientutils|lightning_chain|zm_sidequests|zm_powerup_ww_grenade|zm_perk_random|zm_ai_mechz_claw|zm_aat_thunder_wall|zm_aat_turned|zm_aat_fire_works|zm_aat_dead_wire|zm_aat_blast_furnace|zm_weap_quantum_bomb|_zm_ai_thrasher|thrasherclientutils|zm_powerup_fire_sale|zm_trap_electric|zm_grappler|zm_ai_napalm|zm_weap_glaive|keeper_skull|multi_extracam|struct|delete|duplicate_render_bundle|water_surface|scene|csceneobject|scene|cscene|scene|turret|exploder|music|footsteps|math|beam|duplicate_render|scene|array|audio|util|hackable|player|postfx|fx|lightninggun|spike_charge_siegebot|satchel_charge|decoy|antipersonnel_guidance|bouncingbetty|replay_gun|weaponobjects|grapple|antipersonnel_guidance|sticky_grenade|tacticalinsertion|sticky_grenade|flashgrenades|acousticsensor|trophy_system|sticky_grenade|proximity_grenade|hacker_tool|riotshield|hive_gun|scrambler|empgrenade|flagsys|vehicle|ability_player|ability_power|ability_gadgets|_gadget_hero_weapon|_gadget_camo_render|gadget_camo_render|_gadget_rapid_strike|_gadget_servo_shortout|_gadget_exo_breakdown|_gadget_combat_efficiency|_gadget_resurrect|_gadget_concussive_wave|_gadget_sensory_overload|_gadget_other|_gadget_flashback|_gadget_surge|_gadget_clone_render|gadget_clone_render|_gadget_cleanse|_gadget_misdirection|_gadget_immolation|gadget_roulette|_gadget_heat_wave|_gadget_es_strike|_gadget_clone|_gadget_iff_override|_gadget_ravage_core|_gadget_system_overload|_gadget_armor|_gadget_unstoppable_force|_gadget_forced_malfunction|_gadget_overdrive|_gadget_security_breach|gadget_vision_pulse|_gadget_shock_field|gadget_thief|_gadget_speed_burst|_gadget_camo|_gadget_cacophany|_gadget_mrpukey|_gadget_firefly_swarm|_gadget_smokescreen|burnplayer|vehicle|oob|sound|lui|filter|end_game_taunts|cscriptbundleobjectbase|scriptbundle|cscriptbundlebase|scriptbundle|drown|skeleton|zombieclientutils|archetype_thrasher|thrasherclientutils|apothiconfurybehavior|archetype_damage_effects|warlord|warlordclientutils|zombie_vortex|raz|razclientutils|zombie|zombieclientutils|notetracks|margwa|margwaclientutils|archetype_human|humanclientutils|archetype_robot|robotclientutils|mechz|mechzclientutils|zombie_death|archetypedirewolf|destructible_character|destructclientutils|fx_character|fxclientutils|gibclientutils|archetype_secondary_animations|animation|blood|clientfield|load|weapon_customization_icon|gfx|groundfx|driving_fx|vehiclewheelfx|driving_fx|vehicle_camera_fx|driving_fx|sentinel_drone|dragon|glaive|raps|parasite|wasp|counteruav|quadtank|spider|siegebot|ai_shared|ai|trigger|aat|clientfaceanim|flag|system|shaderanim|explode|debug_menu|visionset_mgr|callback|character_customization|animation|weapons_shared|zm_altbody_beast|ballistic_knife|_zm_weap_plunger|zm_attackables|zm|zm_weap_gravityspikes|_zm_weap_nesting_dolls|tomb_shield|zm_score|zm_pers_upgrades_functions|_zm_weap_claymore|zm_altbody|zm_timer|zm_stats|zm_weap_staff_air|zm_game_module|zm_shadow_zombie|bouncingbetty|zm_ai_sonic|zm_mgturret|zm_weap_annihilator|zm_audio|zm_powerup_insta_kill|zm_powerups|zm_weap_microwavegun|zm_ai_raps|zm_powerup_double_points|zm_ai_dogs|zm_hero_weapon|zm_weap_staff_water|zm_unitrigger|zm_perks|zm_ai_spiders|zm_ai_wasp|zm_powerup_genesis_random_weapon|zm_perk_juggernaut|zm_zonemgr|_zm_weap_elemental_bow_storm|zm_ai_wasp|_zm_weap_bowie|_zm_weap_beacon|zm_behavior_utility|zm_powerup_carpenter|rocketshield|zm_behavior|bgb_token|zm_hackables_box|zm_pap_util|_sticky_grenade|ball|zm_fog|zm_magicbox_zod|zm_weap_shrink_ray|zm_traps|zm_bot|zm_perk_deadshot|zm_perk_widows_wine|zm_equipment|zm_ai_sentinel_drone|zm_ai_spiders|_zm_weap_elemental_bow_wolf_howl|riotshield|zm_powerup_free_perk|zm_turned|zm_player|zm_powerup_bonus_points_player|zm_ai_margwa|controllable_spider|zm_playerhealth|zm_craft_shield|zm_craftables|util|rat|idgun|zm_ai_clone|zm_weap_staff_revive|zm_ai_margwa|zm_daily_challenges|zm_ai_mechz|zm_elemental_zombie|zm_powerup_nuke|zm_powerup_full_ammo|zm_blockers|zm_hackables_powerups|zm_perk_electric_cherry|zm_perk_sleight_of_hand|zm_hackables_packapunch|zm_game_module_utility|zm_hackables_doors|zm_pers_upgrades_system|zm_powerup_zombie_blood|serversettings|weapon_utils|spawnlogic|zm_gametype|hud_message|dev|weaponobjects|scoreboard|globallogic_defaults|globallogic_score|globallogic|globallogic_actor|globallogic_audio|damagefeedback|globallogic_ui|globallogic_vehicle|hostmigration|clientids|globallogic_player|globallogic_utils|globallogic_spawn|spawning|perplayer|shellshock|weapons|spectating|zclassic|dragon_strike|zm_radio|zm_powerup_shield_charge|zm_weap_black_hole_bomb|zm_weap_staff|zm_powerup_island_seed|zm_magicbox|zm_melee_weapon|_zm_weap_octobomb|_zm_weap_tesla|_zm_weap_elemental_bow_rune_prison|zm_perk_doubletap2|zm_utility|zm_auto_turret|zm_perk_quick_revive|zm_ffotd|zm_placeable_mine|zm_ai_quad|destructible|zm_powerup_weapon_minigun|zm_trap_fire|mirg2000|zm_ai_raz|fx|zm_weap_staff_lightning|zm_equip_gasmask|_zm_weap_raygun_mark3|zm_ai_quadrotor|load|zm_powerup_empty_perk|_zm_pack_a_punch|zm_weapons|zm_hackables_boards|zm_perk_staminup|zm_light_zombie|challenges|_zm_weap_elemental_bow_demongate|zm_weap_staff_fire|zm_weap_elemental_bow|zm_laststand|electroball_grenade|zodcompanioninterface|zm_powerup_demonic_rune|_zm_weap_one_inch_punch|zm_powerup_bonus_points_team|zm_audio_zhd|bb|bgb|zm_bgb_respin_cycle|zm_bgb_arms_grace|zm_bgb_reign_drops|zm_bgb_arsenal_accelerator|zm_bgb_extra_credit|zm_bgb_unquenchable|zm_bgb_whos_keeping_score|zm_bgb_on_the_house|zm_bgb_mind_blown|zm_bgb_board_games|zm_bgb_now_you_see_me|zm_bgb_kill_joy|zm_bgb_danger_closest|zm_bgb_armamental_accomplishment|zm_bgb_firing_on_all_cylinders|zm_bgb_power_vacuum|zm_bgb_immolation_liquidation|zm_bgb_licensed_contractor|zm_bgb_disorderly_combat|zm_bgb_idle_eyes|zm_bgb_lucky_crit|zm_bgb_wall_power|zm_bgb_burned_out|zm_bgb_tone_death|zm_bgb_alchemical_antithesis|zm_bgb_perkaholic|zm_bgb_soda_fountain|zm_bgb_self_medication|zm_bgb_flavor_hexed|zm_bgb_projectile_vomiting|zm_bgb_coagulant|zm_bgb_sword_flay|zm_bgb_aftertaste|zm_bgb_near_death_experience|zm_bgb_eye_candy|zm_bgb_newtonian_negation|zm_bgb_impatient|zm_bgb_bullet_boost|zm_bgb_stock_option|zm_bgb_always_done_swiftly|zm_bgb_crate_power|zm_bgb_head_drama|zm_bgb_fatal_contraption|zm_bgb_in_plain_sight|zm_bgb_shopping_free|zm_bgb_crawl_space|zm_bgb_ephemeral_enhancement|zm_bgb_unbearable|zm_bgb_dead_of_nuclear_winter|zm_bgb_slaughter_slide|zm_bgb_secret_shopper|zm_bgb_board_to_death|zm_bgb_temporal_gift|zm_bgb_killing_time|zm_bgb_round_robbin|zm_bgb_undead_man_walking|zm_bgb_phoenix_up|zm_bgb_pop_shocks|zm_bgb_cache_back|zm_bgb_profit_sharing|zm_bgb_anywhere_but_here|zm_bgb_im_feelin_lucky|zm_bgb_fear_in_headlights|_zm_weap_cymbal_monkey|zm_jump_pad|callback|bgb_machine|zm_hackables_perks|zm_power|zm_spawner|zm_weap_glaive|zm_ai_napalm|zm_server_throttle|keeper_skull|zm_clone|zm_equip_hacker|zm_ai_thrasher|zm_grappler|zm_trap_electric|zm_powerup_fire_sale|zm_sidequests|lightning_chain|zm_weap_quantum_bomb|zm_powerup_ww_grenade|zm_ai_mechz_claw|zm_perk_random|zm_net|zm_pers_upgrades|_zm_weap_sickle|archetype_zod_companion|zodcompanionbehavior|zodcompanionserverutils|zodcompanionutility|zm_aat_thunder_wall|zm_aat_turned|zm_aat_dead_wire|zm_aat_fire_works|zm_aat_blast_furnace|zm_ai_faller|zm_powerup_castle_tram_token|zm_hackables_wallbuys|_zm_weap_ballistic_knife|zm_perk_additionalprimaryweapon|zm_weap_thundergun|zm_devgui|zm_weap_dragon_gauntlet|_zm_weapon_locker|art|zm_powerup_beast_mana|zm_puppet|struct|character|delete|table|bot|bot|bot|bot_combat|scene|csceneobject|scene|cscene|scene|cawarenesssceneobject|scene|cawarenessscene|scene|compass|math|medals|duplicate_render|string|music|loadout|laststand|entityheadicons|exploder|turret|objpoints|cdoor|doors|hackable|name|util|audio|array|persistence|hud|scene|ai_puppeteer|vehicle|bb|vehicle_ai|ballistic_knife|lightninggun|satchel_charge|tabun|weapon_utils|bouncingbetty|singlelockap_guidance|sensor_grenade|spike_charge_siegebot|decoy|sticky_grenade|multilockap_guidance|weaponobjects|grapple|replay_gun|tacticalinsertion|acousticsensor|flashgrenades|heatseekingmissile|smokegrenade|pineapple_gun|trophy_system|hive_gun|riotshield|hacker_tool|proximity_grenade|empgrenade|weapons|scrambler|flagsys|fx|throttle|player|gameobjects|clientids|ability_util|ability_power|ability_player|ability_gadgets|_gadget_servo_shortout|_gadget_rapid_strike|_gadget_hero_weapon|resurrect|_gadget_concussive_wave|_gadget_combat_efficiency|_gadget_exo_breakdown|_gadget_cleanse|_gadget_surge|flashback|_gadget_other|_gadget_sensory_overload|_gadget_misdirection|roulette|_gadget_immolation|_gadget_active_camo|armor|_gadget_system_overload|_gadget_ravage_core|_gadget_iff_override|_gadget_clone|heat_wave|_gadget_es_strike|_gadget_security_breach|_gadget_overdrive|_gadget_forced_malfunction|_gadget_unstoppable_force|_gadget_smokescreen|_gadget_mrpukey|_gadget_firefly_swarm|_gadget_cacophany|speedburst|_gadget_camo|_gadget_shock_field|_gadget_vision_pulse|thief|gameskill|cscriptbundleobjectbase|scriptbundle|cscriptbundlebase|scriptbundle|colors|scoreevents|sound|rat_shared|lui|rank|oob|vehicle|hostmigration|burnplayer|demo|statemachine|zombie_shared|archetype_aivsaimelee|zombiedogbehavior|thrasherbehavior|thrasherserverutils|skeletonbehavior|archetype_mocomps_utility|blackboard|archetype_human_riotshield|humanriotshieldbehavior|humanriotshieldserverutils|archetype_human_exposed|apothiconfurybehavior|animationadjustmentinfoz|apothiconfurybehavior|animationadjustmentinfoxy|apothiconfurybehavior|jukeinfo|apothiconfurybehavior|apothiconfurybehaviorinterface|zombiedoginterface|behavior_state_machine_planners_utility|aiutility|mannequininterface|humanriotshieldinterface|robotinterface|clonebehavior|cloneserverutils|archetype_damage_effects|archetype_human_cover|animationstatenetwork|zombiebehavior|mannequinbehavior|warlordinterface|razbehavior|razserverutils|aiutility|warlord|warlordbehavior|warlordserverutils|warlorddebughelpers|zombie_vortex|archetype_robot|robotsoldierbehavior|robotsoldierserverutils|robotphalanx|humanrpginterface|archetype_human|humansoldierserverutils|phalanx|margwabehavior|margwaserverutils|archetype_human_locomotion|archetype_human_rpg|humanrpgbehavior|zombieinterface|mechzbehavior|mechzserverutils|humaninterface|apothiconfuryinterface|animation_selector_table_evaluators|archetypedirewolf|zombie_death|destructible_character|destructserverutils|blackboard|animationstatenetwork|behaviorstatemachine|ai_interface|ai|blackboard|scripted|animationselectortable|animationstatenetwork|behave|animationstatenetworkutility|face|behaviortreenetwork|behaviortreenetworkutility|as_debug|shared|aisquads|squad|aisquads|init|gib|gibserverutils|aiutility|archetype_civilian|archetypecivilian|thrasherinterface|zombiequad|archetype_secondary_animations|zombie_utility|blackboard|debug|killcam|load|simple_hostmigration|clientfield|tweakables|spawner|hud|popups|animation|drown|attack_drone|glaive|dragon|sentinel_drone|wasp|parasite|hunter|raps|counteruav|auto_turret|amws|spider|quadtank|siegebot|hud_message|cteamgather|teamgather|vehicle_death|aat|trigger|serverfaceanim|challenges|ai|ammo|weapons|animation|damagefeedback|callback|visionset_mgr|dev|system|ccontainer|containers|flag|killstreaks'

  sys_namespace_maybe: '(sys\s*::\s*)?'
  # functions where kvp's are inputs
  kvp_function_lookahead: 'struct\s*::\s*get(_array)?|{{sys_namespace_maybe}}(getent|getentarray|getnode|getnodearray|getvehiclenode|getvehiclenodearray)'
  # opeators where thread signal strings are inputs
  thread_signal_operator_lookahead: 'waittillmatch|waittill|notify|endon'
  # functions where thread signal strings are inputs
  thread_signal_function_lookahead: 'flag\s*::\s*[sg]et\w*|\w*\s*::\s*\w*(wait_?till|notify|endon)\w*'
  # other lookaheads
  weapon_name_function_lookahead: '{{sys_namespace_maybe}}getweapon'
  clientfield_function_lookahead: 'clientfield\s*::\s*\w+'
  sound_function_lookahead: '{{sys_namespace_maybe}}(playsound|playlocalsound|playloopsound)'

contexts:
  main:
    - include: preprocessor-global
    - include: compiler-global
    - include: devblock-global
    - include: global

  global:
    - include: early-expressions
    - match: ^\s*(?=\w+)
      push: global-modifier
    - include: late-expressions


         ###   ###    ## ##    ## ##    ###   #     #
        #     #   #  #  #  #  #  #  #  #   #  ##    #
        #     #   #  #  #  #  #  #  #  #   #  # #   #
        #     #   #  #  #  #  #  #  #  #   #  #  #  #
        #     #   #  #  #  #  #  #  #  #   #  #   # #
        #     #   #  #  #  #  #  #  #  #   #  #    ##
         ###   ###   #  #  #  #  #  #   ###   #     #


  comments:
    - include: scope:source.codt7.common#comments
    - match: '/@'
      scope: punctuation.definition.comment.codt7.gsc
      push:
        - meta_scope: comment.block.documentation.codt7.gsc
        - match: '@/'
          scope: punctuation.definition.comment.codt7.gsc
          pop: true

  numbers:
    - include: scope:source.codt7.common#numbers

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: (\\)$\n
      captures:
        1: punctuation.separator.continuation.codt7.gsc
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.codt7.gsc
    - match: \\.
      scope: invalid.illegal.unknown-escape.codt7.gsc

  operator-ampersand:
    # bitwise-and
    - match: '(?<={{variable_or_constant_border}})\s*(&)\s*(?!(?i:array)\b)(?={{variable_or_constant_border}})'
      captures:
        1: keyword.operator.arithmetic.codt7.gsc
    - match: '(?<={{variable_or_constant_border}})\s*(&)\s*(?i:array)'
      captures:
        1: keyword.operator.arithmetic.codt7.gsc
    # address-of
    - match: (?<!{{variable_or_constant_border}})\s*(&)(?=\s*{{identifier}})
      captures:
        1: keyword.operator.address-of.codt7.gsc
      push: builtin-function-call-maybe

  operator-percent-sign:
    # modulus
    - match: '(?<={{variable_or_constant_border}})\s*(%)\s*(?={{variable_or_constant_border}})'
      captures:
        1: keyword.operator.arithmetic.codt7.gsc
    # anim reference
    - match: '(?<!{{variable_or_constant_border}})\s*((%)\s*)(?=\w)'
      captures:
        1: meta.anim-reference.codt7.gsc string.unquoted.codt7.gsc
        2: keyword.operator.other.codt7.gsc
      push:
        - meta_content_scope: meta.anim-reference.codt7.gsc string.unquoted.codt7.gsc
        - match: '(?=[^\w:])'
          pop: true

  operator-expression-evaluation:
    - match: \[\[
      scope: punctuation.definition.expression-evaluation.begin.codt7.gsc
      push:
        - meta_scope: meta.expression-evaluation.codt7.gsc
        - match: \]\]
          scope: punctuation.definition.expression-evaluation.end.codt7.gsc
          pop: true
        - include: expressions

  operators:
    - match: (?:\+\+|\-\-)
      scope: keyword.operator.arithmetic.codt7.gsc
    - match: '->|::'
      scope: punctuation.accessor.codt7.gsc
    - match: \+\=|\-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.codt7.gsc
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.codt7.gsc
    - match: <\=|>\=|<|>|\=\=\=|\!\=\=|\=\=|\!\=
      scope: keyword.operator.comparison.codt7.gsc
    - match: \+|\-|\*|/|\||\^|\~|\!
      scope: keyword.operator.arithmetic.codt7.gsc
    - match: '\='
      scope: keyword.operator.assignment.codt7.gsc
    - match: '\?|:'
      scope: keyword.operator.ternary.codt7.gsc
    - include: operator-ampersand
    - include: operator-percent-sign
    - include: operator-expression-evaluation

  preprocessor-disabled:
    - include: scope:source.codt7.common#preprocessor-disabled

  preprocessor-line-continuation:
    - include: scope:source.codt7.common#preprocessor-line-continuation

  preprocessor-line-ending:
    - include: scope:source.codt7.common#preprocessor-line-ending

  preprocessor-line-ending-lookahead:
    - include: scope:source.codt7.common#preprocessor-line-ending-lookahead

  preprocessor-comments:
    - include: scope:source.codt7.common#preprocessor-comments


  ###   ###   ####  ###   ###     ###    ###  ####   ###   ###    ###   ###
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  ###   ###   ####  ###   ###    #   #  #     ####   ###   ###   #   #  ###
  #     # #   #     #     # #    #   #  #     #         #     #  #   #  # #
  #     #  #  #     #     #  #   #   #  #     #         #     #  #   #  #  #
  #     #   # ####  #     #   #   ###    ###  ####   ###   ###    ###   #   #


                   ###  #      ###  ###    #   #
                  #     #     #   # #  #  # #  #
                  #     #     #   # #  # #   # #
                  #  ## #     #   # ###  ##### #
                  #   # #     #   # #  # #   # #
                  #   # #     #   # #  # #   # #
                   ###  #####  ###  ###  #   # #####



  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-rule-enabled-global:
    - match: ^\s*((#\s*if)\s+(?i:(1)|(true)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.codt7.gsc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-disabled-global:
    - match: ^\s*((#\s*if)\s+(?i:(0)|(false)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.codt7.gsc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-if-branch-global
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#\s*if)\s+(?i:(1)|(true)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.codt7.gsc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#\s*if)\s+(?i:(0)|(false)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.codt7.gsc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      set: preprocessor-block-if-branch-statements
    - match: (?=(?!{{non_func_keywords}}){{identifier}}\s*\()
      set: preprocessor-if-branch-function-call
    - include: negated-block
    - include: statements

  preprocessor-if-branch-function-call:
    - meta_content_scope: meta.function-call.codt7.gsc
    # - match: '{{identifier}}'
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set: preprocessor-if-branch-function-call-arguments

  preprocessor-if-branch-function-call-arguments:
    - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
    - match: \)
      scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*(?:elif|else))\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-if-branch-function-call-arguments-finish
    - include: expressions

  preprocessor-if-branch-function-call-arguments-finish:
    - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
    - match: \)
      scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
      pop: true
    - include: expressions

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-if-branch-statements
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.codt7.gsc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.codt7.gsc keyword.control.import.define.codt7.gsc
      push:
        - meta_content_scope: meta.preprocessor.macro.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: ({{identifier}})(?=\()
          scope: entity.name.function.preprocessor.codt7.gsc
          set:
            - match: \(
              scope: punctuation.section.group.begin.codt7.gsc
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.codt7.gsc
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.codt7.gsc meta.group.codt7.gsc
    - match: '{{identifier}}'
      scope: variable.parameter.codt7.gsc
    - match: \)
      scope: punctuation.section.group.end.codt7.gsc
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.codt7.gsc
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.codt7.gsc
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: (?=\))
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.codt7.gsc
          captures:
            1: punctuation.definition.comment.codt7.gsc
            2: punctuation.definition.comment.codt7.gsc
        - match: \S+?
          scope: invalid.illegal.unexpected-character.codt7.gsc
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: (/\*).*(\*/)
      captures:
        1: punctuation.definition.comment.codt7.gsc
        2: punctuation.definition.comment.codt7.gsc
    - match: \S+?
      scope: invalid.illegal.unexpected-character.codt7.gsc
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.codt7.gsc

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.codt7.gsc
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
    - include: expressions

  preprocessor-practical-workarounds:
    - include: preprocessor-convention-ignore-uppercase-ident-lines
    - include: preprocessor-convention-ignore-uppercase-calls-without-semicolon

  preprocessor-convention-ignore-uppercase-calls-without-semicolon:
    - match: ^\s*{{macro_identifier}}\s*(\()(?=[^\)]*\)\s*$)
      captures:
        1: punctuation.section.group.begin.codt7.gsc
      push:
        - meta_scope: meta.assumed-macro.codt7.gsc
        - match: \)
          scope: punctuation.section.group.end.codt7.gsc
          pop: true
        - include: expressions

  preprocessor-convention-ignore-uppercase-ident-lines:
    - match: ^(\s*{{macro_identifier}})+\s*$
      scope: meta.assumed-macro.codt7.gsc

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|undef))\b
      captures:
        1: keyword.control.import.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
    - match: ^\s*(#\s*insert)\b
      captures:
        1: keyword.control.import.insert.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.insert.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-line-ending
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
    - match: ^\s*(#\s*include)\b
      captures:
        1: keyword.control.import.include.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.include.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - include: preprocessor-practical-workarounds

  preprocessor-expressions:
    - include: preprocessor-macro-define
    - include: preprocessor-other

  compiler-global:
    - match: ^\s*(#\s*using)\b
      captures:
        1: keyword.control.import.using.codt7.gsc
      push:
        - meta_scope: meta.compiler.using.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*namespace)\b
      captures:
        1: keyword.control.import.namespace.codt7.gsc
      push:
        - meta_scope: meta.compiler.namespace.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '{{identifier}}'
          scope: entity.name.namespace.codt7.gsc
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*precache)\b
      captures:
        1: keyword.control.import.precache.codt7.gsc
      push:
        - meta_scope: meta.compiler.precache.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \(
          scope: punctuation.section.group.begin.codt7.gsc
          push:
            - meta_scope: meta.group.codt7.gsc
            - include: preprocessor-line-continuation
            - include: preprocessor-line-ending
            - include: preprocessor-comments
            - match: \)
              scope: punctuation.section.group.end.codt7.gsc
              pop: true
            - match: (?<=\()(?=\s*")
              push: string-precache-type
            - match: '"'
              scope: punctuation.definition.string.begin.codt7.gsc
              push:
                - meta_scope: string.quoted.double.codt7.gsc
                - match: '"'
                  scope: punctuation.definition.string.end.codt7.gsc
                  pop: true
            - match: ','
              scope: punctuation.separator.codt7.gsc
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*using_animtree)\b
      captures:
        1: keyword.control.import.using_animtree.codt7.gsc
      push:
        - meta_scope: meta.compiler.using_animtree.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \(
          scope: punctuation.section.group.begin.codt7.gsc
          push:
            - meta_scope: meta.group.codt7.gsc
            - include: preprocessor-line-continuation
            - include: preprocessor-line-ending
            - include: preprocessor-comments
            - match: \)
              scope: punctuation.section.group.end.codt7.gsc
              pop: true
            - match: '"'
              scope: punctuation.definition.string.begin.codt7.gsc
              push:
                - meta_scope: string.quoted.double.codt7.gsc
                - meta_content_scope: meta.animtree.codt7.gsc
                - match: '"'
                  scope: punctuation.definition.string.end.codt7.gsc
                  pop: true
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*animtree)\b
      captures:
        1: keyword.control.import.codt7.gsc

  string-precache-type:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: string.quoted.double.codt7.gsc
        - meta_content_scope: meta.asset-type.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
    - match: (?=\S)
      pop: true

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures
    - include: preprocessor-practical-workarounds

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#\s*if)\s+(?i:(1)|(true)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.codt7.gsc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#\s*if)\s+(?i:(0)|(false)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.codt7.gsc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled


      #### #     # ###  ###   ####   ###   ###  #  ###  #     #  ###
      #     #   #  #  # #  #  #     #     #     # #   # ##    # #
      #      # #   #  # #  #  #     #     #     # #   # # #   # #
      ####    #    ###  ###   ####   ###   ###  # #   # #  #  #  ###
      #      # #   #    # #   #         #     # # #   # #   # #     #
      #     #   #  #    #  #  #         #     # # #   # #    ##     #
      #### #     # #    #   # ####   ###   ###  #  ###  #     #  ###

  statements:
    - include: preprocessor-statements
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      push:
        - meta_scope: meta.block.codt7.gsc
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.codt7.gsc
          pop: true
        - include: statements

  devblock-global:
    - match: '/#'
      scope: punctuation.section.devblock.begin.codt7.gsc
      push:
        - meta_scope: meta.devblock.codt7.gsc
        - match: '#/'
          scope: punctuation.section.devblock.end.codt7.gsc
          pop: true
        - include: global

  parens:
    - match: \(
      scope: punctuation.section.group.begin.codt7.gsc
      push:
        - meta_scope: meta.group.codt7.gsc
        - match: \)
          scope: punctuation.section.group.end.codt7.gsc
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.codt7.gsc
      push:
        - meta_scope: meta.brackets.codt7.gsc
        - match: \]
          scope: punctuation.section.brackets.end.codt7.gsc
          pop: true
        - include: expressions

  devblock:
    - match: '/#'
      scope: punctuation.section.devblock.begin.codt7.gsc
      push:
        - meta_scope: meta.devblock.codt7.gsc
        - match: '#/'
          scope: punctuation.section.devblock.end.codt7.gsc
          pop: true
        - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: devblock
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - include: access
    - match: ','
      scope: punctuation.separator.codt7.gsc
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.codt7.gsc
    - match: '#/'
      scope: invalid.illegal.stray-devblock-end.codt7.gsc

  late-expressions:
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.codt7.gsc

  case-default:
    - match: \b(default|case)\b
      scope: keyword.control.codt7.gsc
      push:
        - match: ':'
          scope: punctuation.separator.codt7.gsc
          pop: true
        - include: expressions


  # For operators that take thread-signal strings as operands,
  # namely waittill, waittillmatch, notify, and endon
  # Adds an additional meta scope for auto-completions
  keywords-parens:
    - match: \b(?i:(waittillmatch|waittill|notify|endon))\b\s*(\()
      captures:
        1: keyword.operator.word.codt7.gsc
        2: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      push:
        - meta_content_scope: meta.group.codt7.gsc
        - match: \)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - match: (?=")
          push: string-thread-signal
        - include: expressions
    - match: \b(?i:({{keyword_operators}}))\b\s*(\()
      captures:
        1: keyword.operator.word.codt7.gsc
        2: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      push:
        - meta_content_scope: meta.group.codt7.gsc
        - match: \)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions

  keywords:
    - match: \bbreak\b
      scope: keyword.control.flow.break.codt7.gsc
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.codt7.gsc
    - match: \bthread\b
      scope: keyword.control.flow.thread.codt7.gsc
    - match: \breturn\b
      scope: keyword.control.flow.return.codt7.gsc
    - match: \b({{control_keywords}})\b
      scope: keyword.control.codt7.gsc
    - match: \b(?i:({{keyword_operators}}))\b
      scope: keyword.operator.word.codt7.gsc
    - match: \bnew\b
      scope: keyword.declaration.new.codt7.gsc
    - match: '#\s*animtree\b'
      scope: variable.language.codt7.gsc

  constants:
    - match: \b(?i:({{language_constant}}))\b
      scope: constant.language.codt7.gsc
    - match: \b(__FILE__|__LINE__|FASTFILE)\b
      scope: support.constant.codt7.gsc

  variables:
    - include: array-variable-name

  access-illegal:
    - match: \.(\s*\.)+
      scope: invalid.illegal.syntax.codt7.gsc

  access:
    - match: (\.)\s*(?!\.)
      scope: meta.member-access.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
      push:
        - meta_content_scope: meta.member-access.codt7.gsc
        - match: \bsize\b
          scope: keyword.other.codt7.gsc
        - match: '{{identifier}}'
          scope: variable.other.member.codt7.gsc
        - include: access
        - match: (?=\W)
          pop: true
    - include: access-illegal

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.codt7.gsc

  types:
    - match: \b({{basic_types}})\b
      scope: storage.type.codt7.gsc

  # due to the large amount of builtins, we should check for a possible builtin call
  # and then push a new context to capture, otherwise input starts to lag
  builtin-functions:
    # sys namespace - builtin call
    - match: \b(?i:sys)\s*(::)
      captures:
        1: punctuation.accessor.codt7.gsc
      push: builtin-function-call-maybe
    # call without a namespace specifier - possibly a builtin call
    - match: (?<!::)(?=\s*{{identifier}}\s*\()
      push: builtin-function-call-maybe

  builtin-function-call-maybe:
    - match: \b(?i:({{function_builtin}}))\b
      scope: support.function.builtin.codt7.gsc
      pop: true
    - match: (?=\S)
      pop: true

  script-functions:
    - match: (?={{identifier}}\s*::\s*\w*)
      push: script-function-call-maybe

  # like with builtin calls, we check for the possibilty and push to a new
  # context and capture everything there
  script-function-call-maybe:
    - match: \b(?i:{{namespace}})\s*(::)\s*\w*
      scope: meta.developer-function-name.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
    - match: '{{identifier}}\s*(::)\s*\w*'
      scope: meta.function-name.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
    - match: (?=\S)
      pop: true

  # Eat "array" as variable name
  array-variable-name:
    - match: \b(?i:array)\b(?!\s*(\(|:|$))

  function-call-before-paren:
    - include: builtin-functions
    - include: script-functions
    - match: '::'
      scope: punctuation.accessor.codt7.gsc
    - match: '{{identifier}}'

  function-call:
    - match: (?=({{identifier}}\s*::\s*)?{{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.codt7.gsc
        - match: \b(?=(?i:{{thread_signal_function_lookahead}})\s*\()
          set: function-call-thread-signal
        - match: \b(?=(?i:{{kvp_function_lookahead}})\s*\()
          set: function-call-kvp
        - match: \b(?=(?i:{{weapon_name_function_lookahead}})\s*\()
          set: function-call-weapon-name
        - match: \b(?=(?i:clientfield\s*::\s*register)\s*\()
          set: function-call-clientfield-pool
        - match: \b(?=(?i:{{clientfield_function_lookahead}})\s*\()
          set: function-call-clientfield-name
        # - match: \b(?=(?i:{{sound_function_lookahead}})\s*\()
        - include: function-call-before-paren
        - match: \(
          scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set:
            - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
            - match: \)
              scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
              pop: true
            - include: expressions
    - include: script-functions

  # For functions which are wrappers for thread-signal operators
  # or otherwise involve the passing of thread-signal strings as arguments,
  # such as util::waittill_any(), flag::get(), etc.
  # Adds an additional meta scope for auto-completions
  function-call-thread-signal:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?=")
          push: string-thread-signal
        - include: expressions

  string-thread-signal:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: meta.thread-signal.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-kvp:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?<=\()(?=\s*")
          push: string-kvp-value
        - match: (?<=,)(?=\s*")
          push: string-kvp-key
        - include: expressions

  string-kvp-value:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: meta.kvp-argument-value.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  string-kvp-key:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: meta.kvp-argument-key.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-weapon-name:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?=")
          push: string-weapon-name
        - include: expressions

  string-weapon-name:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: meta.weapon-name.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-clientfield-pool:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?<=\()(?=\s*")
          push: string-clientfield-pool
        - include: expressions

  string-clientfield-pool:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: meta.clientfield-pool.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-clientfield-name:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?=")
          push: string-clientfield-name
        - include: expressions

  string-clientfield-name:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: meta.clientfield-name.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true


                   ###  #      ###  ###     #   #
                  #     #     #   # #  #   # #  #
                  #     #     #   # #  #  #   # #
                  #  ## #     #   # ###   ##### #
                  #   # #     #   # #  #  #   # #
                  #   # #     #   # #  #  #   # #
                   ###  #####  ###  ###   #   # #####


                   #####  #     #  ###   #####   ###
                     #     #   #   #  #  #      #
                     #      # #    #  #  #      #
                     #       #     ###   #####   ###
                     #       #     #     #          #
                     #       #     #     #          #
                     #       #     #     #####   ###

  global-modifier:
    - include: comments
    - include: modifiers
    - match: (?=\S)
      set: global-type

  # GSC is convenient for this context because code can only appear in fuction or class bodies
  global-type:
    - include: comments
    - match: (?=\bclass\b)
      set: data-structures
    - match: (?=\bfunction\b)
      set: global-function
    - match: '{{macro_identifier}}\s*(\()(?=[^\)]+\))'
      captures:
        1: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      push:
        - meta_scope: meta.macro-call.codt7.gsc
        - meta_content_scope: meta.group.codt7.gsc
        - match: \)
          scope: meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set: global-function-t5


                   ###  #      ###  ###     #   #
                  #     #     #   # #  #   # #  #
                  #     #     #   # #  #  #   # #
                  #  ## #     #   # ###   ##### #
                  #   # #     #   # #  #  #   # #
                  #   # #     #   # #  #  #   # #
                   ###  #####  ###  ###   #   # #####


      ###  #####  ###   #   #   ###  #####  #   #  ###   #####   ###
     #       #    #  #  #   #  #       #    #   #  #  #  #      #
     #       #    #  #  #   #  #       #    #   #  #  #  #      #
      ###    #    ###   #   #  #       #    #   #  ###   #####   ###
         #   #    # #   #   #  #       #    #   #  # #   #          #
         #   #    #  #  #   #  #       #    #   #  #  #  #          #
      ###    #    #   #  ###    ###    #     ###   #   # #####   ###


  data-structures:
    # Detect variable type definitions using class followed by a tag
    - match: \bclass\b
      scope: keyword.declaration.class.codt7.gsc
      set: data-structures-class-definition
    - match: (?=\S)
      pop: true

  data-structures-class-definition:
    - meta_scope: meta.class.codt7.gsc
    - include: data-structures-definition-common-begin
    - match: (?={{identifier}})
      set:
        - meta_scope: meta.class.codt7.gsc
        - match: '{{identifier}}'
          scope: entity.name.class.codt7.gsc
          set: data-structures-class-definition-after-identifier

  data-structures-class-definition-after-identifier:
    - meta_content_scope: meta.class.codt7.gsc
    - include: data-structures-definition-common-begin
    # No matching of identifiers since they should all be macros at this point
    - include: data-structures-definition-common-end
    - match: '\{'
      scope: meta.block.codt7.gsc punctuation.section.block.begin.codt7.gsc
      set:
        - meta_content_scope: meta.class.codt7.gsc meta.block.codt7.gsc
        - match: '\}'
          scope: meta.class.codt7.gsc meta.block.codt7.gsc punctuation.section.block.end.codt7.gsc
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - include: preprocessor-other
    - include: modifiers
    - include: preprocessor-workaround-eat-macro-before-identifier

  data-structures-definition-common-end:
    - match: ':'
      scope: punctuation.separator.codt7.gsc
      push:
        - include: comments
        - include: preprocessor-other
        - include: modifiers
        - match: (?={{identifier}})
          push:
            - meta_scope: entity.other.inherited-class.codt7.gsc
            - match: '{{identifier}}'
            - match: ''
              pop: true
        - match: (?=\{)
          pop: true

  preprocessor-workaround-eat-macro-before-identifier:
    # Handle macros so they aren't matched as the class name
    - match: ({{macro_identifier}})(?=\s+{{identifier}})
      captures:
        1: meta.assumed-macro.codt7.gsc

  data-structures-body:
    - include: preprocessor-data-structures
    - match: ^\s*(?=(constructor|destructor)\b)
      push: data-structures-modifier
    - match: (?=\bfunction\b)
      push: global-function
    - include: expressions

  data-structures-modifier:
    - include: comments
    - include: modifiers
    - match: \bdestructor(?=\s*(\(|$))
      scope: meta.method.destructor.codt7.gsc keyword.declaration.destructor.codt7.gsc
      set: method-definition-params
    - match: \bconstructor(?=\s*(\(|$))
      scope: meta.method.constructor.codt7.gsc keyword.declaration.constructor.codt7.gsc
      set: method-definition-params
    - match: (?=\S)
      set: data-structures-type

  data-structures-type:
    - include: comments
    - include: types
    - include: variables
    - include: constants
    - match: (?=\W)
      pop: true

  method-definition-params:
    - meta_content_scope: meta.method.codt7.gsc
    - include: comments
    - match: (?=\()
      set:
        - match: \(
          scope: meta.method.parameters.codt7.gsc meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set:
            - meta_content_scope: meta.method.parameters.codt7.gsc meta.group.codt7.gsc
            - match: \)
              scope: punctuation.section.group.end.codt7.gsc
              set: method-definition-continue
            - match: '&'
              scope: keyword.operator.address-of.codt7.gsc
            - match: '{{identifier}}(?=\s*(,|\)|=))'
              scope: variable.parameter.codt7.gsc
            - match: '='
              scope: keyword.operator.assignment.codt7.gsc
              push:
                - match: (?=,|\))
                  pop: true
                - include: expressions
                - include: preprocessor-line-continuation
            - include: comments
            - match: ','
              scope: punctuation.separator.codt7.gsc
            - include: preprocessor-line-continuation
    - match: (?=\S)
      pop: true

  method-definition-continue:
    - meta_content_scope: meta.method.codt7.gsc
    - include: comments
    - match: (?=\{)
      set: method-definition-body
    - match: (?=\S)
      pop: true

  method-definition-body:
    - meta_content_scope: meta.method.codt7.gsc meta.block.codt7.gsc
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      set:
        - meta_content_scope: meta.method.codt7.gsc meta.block.codt7.gsc
        - match: '\}'
          scope: meta.method.codt7.gsc meta.block.codt7.gsc punctuation.section.block.end.codt7.gsc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements


                   ###  #      ###  ###     #   #
                  #     #     #   # #  #   # #  #
                  #     #     #   # #  #  #   # #
                  #  ## #     #   # ###   ##### #
                  #   # #     #   # #  #  #   # #
                  #   # #     #   # #  #  #   # #
                   ###  #####  ###  ###   #   # #####


      #####  #   #  #     #   ###  #####  #   ###   #     #   ###
      #      #   #  ##    #  #       #    #  #   #  ##    #  #
      #      #   #  # #   #  #       #    #  #   #  # #   #  #
      ####   #   #  #  #  #  #       #    #  #   #  #  #  #   ###
      #      #   #  #   # #  #       #    #  #   #  #   # #      #
      #      #   #  #    ##  #       #    #  #   #  #    ##      #
      #       ###   #     #   ###    #    #   ###   #     #   ###

  global-function-t5:
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.codt7.gsc entity.name.function.codt7.gsc
      set: function-definition-params

  global-function:
    - match: \bfunction\b
      scope: keyword.declaration.function.codt7.gsc
    - include: modifiers
    - include: comments
    # All uppercase identifier just before a newlin is most likely a macro
    - match: ([[:upper:][:digit:]_]+)\s*(\bfunction\b)?\s*$
      captures:
        1: meta.assumed-macro.codt7.gsc
        2: keyword.declaration.codt7.gsc
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))'
      scope: meta.assumed-macro.codt7.gsc
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.codt7.gsc entity.name.function.codt7.gsc
      set: function-definition-params
    - match: (?=\S)
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.codt7.gsc
    - include: comments
    - match: (?=\()
      set:
        - match: \(
          scope: meta.function.parameters.codt7.gsc meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set:
            - meta_content_scope: meta.function.parameters.codt7.gsc meta.group.codt7.gsc
            - match: \)
              scope: punctuation.section.group.end.codt7.gsc
              set: function-definition-continue
            - match: \.{3}(\s*\.)+
              scope: invalid.illegal.unexpected-character.codt7.gsc
            - match: \.{3}
              scope: variable.parameter.variadic.codt7.gsc
            # Eat 1 or 2 dots to prevent premature warning
            - match: \.*
            - match: '&'
              scope: keyword.operator.address-of.codt7.gsc
            - match: '{{identifier}}'
              scope: variable.parameter.codt7.gsc
            - match: '='
              scope: keyword.operator.assignment.codt7.gsc
              push:
                - match: (?=,|\))
                  pop: true
                - include: expressions
                - include: preprocessor-line-continuation
            - include: comments
            - match: ','
              scope: punctuation.separator.codt7.gsc
            - include: preprocessor-line-continuation
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.codt7.gsc
    - include: comments
    - match: (?=\{)
      set: function-definition-body
    - match: (?=\S)
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.codt7.gsc
    - match: '\{'
      scope: meta.block.codt7.gsc punctuation.section.block.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function.codt7.gsc meta.block.codt7.gsc
        - match: '\}'
          scope: meta.function.codt7.gsc meta.block.codt7.gsc punctuation.section.block.end.codt7.gsc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements
