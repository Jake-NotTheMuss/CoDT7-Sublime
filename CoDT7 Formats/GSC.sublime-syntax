%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

# This file is part of the T7-Sublime project.
# T7-Sublime is an enhanced syntax-highlighting package for (almost) all Call of Duty Black Ops III developer file formats.
# GSC is a dedicated scripting language which targets Call of Duty's virtual machine.

name: GSC
file_extensions:
  - gsc
  - csc
  - gsh
scope: source.codt7.gsc
extends: Packages/CoDT7 Formats/GSCSupport.sublime-syntax

variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'

  dec_digits: '{{dec_digit}}+'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'

  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars
  
  control_keywords: 'break|case|continue|default|do|else|for|foreach|in|if|return|switch|while|thread|wait|waitrealtime|waittillframeend'
  basic_types: 'var'
  type_qualifier: 'const'
  compiler_directive: 'private|autoexec'
  modifiers: '{{type_qualifier}}|{{compiler_directive}}'
  keyword_operators: 'isdefined|assert|assertmsg|assertex|wait|waitrealtime|gettime|vectorscale|waittill|waittillmatch|notify|endon|profilestart|profileend'
  non_func_keywords: 'if|for|foreach|switch|while|{{keyword_operators}}'

  language_constant: 'undefined|self|world|classes|level|game|anim|vararg|false|true'

  t6_function_decl: '{{identifier}}(?=\s*(\(|$))'

  sys_namespace_maybe: '(sys\s*::\s*)?'
  # functions where kvp's are inputs
  kvp_function_lookahead: 'struct\s*::\s*get(_array)?|{{sys_namespace_maybe}}(getent|getentarray|getnode|getnodearray|getvehiclenode|getvehiclenodearray)'
  # opeators where thread signal strings are inputs
  thread_signal_operator_lookahead: 'waittillmatch|waittill|notify|endon'
  # functions where thread signal strings are inputs
  thread_signal_function_lookahead: 'flag\s*::\s*[sg]et\w*|\w*\s*::\s*\w*(wait_?till|notify|endon)\w*'
  # other lookaheads
  weapon_name_function_lookahead: '{{sys_namespace_maybe}}getweapon'
  clientfield_function_lookahead: 'clientfield\s*::\s*\w+|registerclientfield'
  sound_function_lookahead: '{{sys_namespace_maybe}}(playsound|playlocalsound|playloopsound)'

contexts:
  main:
    - include: preprocessor-global
    - include: compiler-global
    - include: devblock-global
    - include: global

  global:
    - include: early-expressions
    - match: (?=\w)
      push: global-modifier
    - include: late-expressions


         ###   ###    ## ##    ## ##    ###   #     #
        #     #   #  #  #  #  #  #  #  #   #  ##    #
        #     #   #  #  #  #  #  #  #  #   #  # #   #
        #     #   #  #  #  #  #  #  #  #   #  #  #  #
        #     #   #  #  #  #  #  #  #  #   #  #   # #
        #     #   #  #  #  #  #  #  #  #   #  #    ##
         ###   ###   #  #  #  #  #  #   ###   #     #


  comments:
    - include: scope:source.codt7.common#comments
    - match: '/@'
      scope: punctuation.definition.comment.codt7.gsc
      push:
        - meta_scope: comment.block.documentation.codt7.gsc
        - match: '@/'
          scope: punctuation.definition.comment.codt7.gsc
          pop: true

  numbers:
    - include: scope:source.codt7.common#numbers

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: t6-no-escape
        - include: string_escaped_char

  # Strings where the backslash is not meant to escape
  t6-no-escape:
    - match: \w*(\\[^\Wabefnrtv]\w+)+

  string_escaped_char:
    - match: (\\)$\n
      captures:
        1: punctuation.separator.continuation.codt7.gsc
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.codt7.gsc
    - match: \\.
      scope: invalid.illegal.unknown-escape.codt7.gsc

  operator-ampersand:
    # bitwise-and
    - match: (?<=[[:alnum:]_)])\s*(&)(?!&)
      captures:
        1: keyword.operator.arithmetic.codt7.gsc
    # address-of
    - match: '(?<!&)(&)(?=\s*[[:alpha:]_])'
      captures:
        1: keyword.operator.address-of.codt7.gsc
      push: function-pointer-reference

  operator-percent-sign:
    # modulus
    - match: (?<=[[:alnum:]_]|\))\s*(%)
      captures:
        1: keyword.operator.arithmetic.codt7.gsc
    # anim reference
    - match: '(%)\s*(?=[[:alpha:]_])'
      captures:
        1: keyword.operator.other.codt7.gsc
      push:
        - meta_scope: meta.anim-reference.codt7.gsc string.unquoted.codt7.gsc
        - match: ':+'
        - match: '(?=[^[:alnum:]_])'
          pop: true

  operator-expression-evaluation:
    - match: \[\[
      scope: punctuation.definition.expression-evaluation.begin.codt7.gsc
      push:
        - meta_scope: meta.expression-evaluation.codt7.gsc
        - match: \]\]
          scope: punctuation.definition.expression-evaluation.end.codt7.gsc
          pop: true
        - include: expressions

  operators:
    - match: (?:\+\+|\-\-)
      scope: keyword.operator.arithmetic.codt7.gsc
    # match arrow access token before arithmetic
    - include: reference-access
    - match: \+\=|\-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.codt7.gsc
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.codt7.gsc
    - match: <\=|>\=|<|>|\=\=\=|\!\=\=|\=\=|\!\=
      scope: keyword.operator.comparison.codt7.gsc
    - match: \+|\-|\*|/|\||\^|\~|\!
      scope: keyword.operator.arithmetic.codt7.gsc
    - match: '\='
      scope: keyword.operator.assignment.codt7.gsc
    # T5 function address-of begins with '::', match here before
    # ternary operators
    - include: t5-function-reference
    # non-ternary uses of ':' are dealt with in #function-calls.
    # This also helps with making auto-completions work in function
    # calls enclosed in brackets. See #script-functions
    - match: '\?|:'
      scope: keyword.operator.ternary.codt7.gsc
    - include: operator-ampersand
    - include: operator-percent-sign
    - include: operator-expression-evaluation

  preprocessor-disabled:
    - include: scope:source.codt7.common#preprocessor-disabled

  preprocessor-line-continuation:
    - include: scope:source.codt7.common#preprocessor-line-continuation

  preprocessor-line-ending:
    - include: scope:source.codt7.common#preprocessor-line-ending

  preprocessor-line-ending-lookahead:
    - include: scope:source.codt7.common#preprocessor-line-ending-lookahead

  preprocessor-comments:
    - include: scope:source.codt7.common#preprocessor-comments


  ###   ###   ####  ###   ###     ###    ###  ####   ###   ###    ###   ###
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  ###   ###   ####  ###   ###    #   #  #     ####   ###   ###   #   #  ###
  #     # #   #     #     # #    #   #  #     #         #     #  #   #  # #
  #     #  #  #     #     #  #   #   #  #     #         #     #  #   #  #  #
  #     #   # ####  #     #   #   ###    ###  ####   ###   ###    ###   #   #


                   ###  #      ###  ###    #   #
                  #     #     #   # #  #  # #  #
                  #     #     #   # #  # #   # #
                  #  ## #     #   # ###  ##### #
                  #   # #     #   # #  # #   # #
                  #   # #     #   # #  # #   # #
                   ###  #####  ###  ###  #   # #####



  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-rule-enabled-global:
    - match: ^\s*((#\s*if)\s+(?i:(1)|(true)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.codt7.gsc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-disabled-global:
    - match: ^\s*((#\s*if)\s+(?i:(0)|(false)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.codt7.gsc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    # Advance over function definitions here so the extra leading open brace
    # gets eaten properly (scripts/shared/callbacks_shared.csc, line 675)
    - include: preprocessor-if-branch-global-function
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-if-branch-global-function:
    # T6 function defs
    - match: '{{t6_function_decl}}'
      scope: meta.function.codt7.gsc entity.name.function.codt7.gsc
      push: preprocessor-if-branch-global-function-definition-parameters
    # T7 function defs
    - match: \bfunction\b
      scope: keyword.declaration.function.codt7.gsc
    - include: modifiers
    - include: comments
    # All uppercase identifier just before a newlin is most likely a macro
    - match: ([[:upper:][:digit:]_]+)\s*(\bfunction\b)?\s*$
      captures:
        1: meta.assumed-macro.codt7.gsc
        2: keyword.declaration.function.codt7.gsc
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|:|$))'
      scope: meta.assumed-macro.codt7.gsc
    # Real function definition
    - match: '(?:{{identifier}}(::))?({{identifier}})(?=\s*(\(|$))'
      scope: meta.function.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
        2: entity.name.function.codt7.gsc
      push: preprocessor-if-branch-global-function-definition-parameters

  preprocessor-if-branch-global-function-definition-parameters:
    - meta_content_scope: meta.function.codt7.gsc
    - include: comments
    - match: (?=\()
      set:
        - match: \(
          scope: meta.function.parameters.codt7.gsc meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set: preprocessor-if-branch-global-function-parameters
    - match: (?=\S)
      pop: true

  preprocessor-if-branch-global-function-parameters:
    - meta_content_scope: meta.function.parameters.codt7.gsc meta.group.codt7.gsc
    - match: \)
      scope: punctuation.section.group.end.codt7.gsc
      pop: true
    - match: \.{3}(\s*\.)+
      scope: invalid.illegal.unexpected-character.codt7.gsc
    - match: \.{3}
      scope: variable.parameter.variadic.codt7.gsc
    # Eat 1 or 2 dots to prevent premature warning
    - match: \.*
    - match: '&'
      scope: keyword.operator.address-of.codt7.gsc
    - match: '{{identifier}}'
      scope: variable.parameter.codt7.gsc
    - match: '='
      scope: keyword.operator.assignment.codt7.gsc
      set: preprocessor-if-branch-global-function-parameter-assignment
    - include: comments
    - match: ','
      scope: punctuation.separator.codt7.gsc
    - include: preprocessor-line-continuation

  preprocessor-if-branch-global-function-parameter-assignment:
    - meta_scope: meta.function.parameters.assignment.codt7.gsc meta.group.codt7.gsc
    - match: (?=,|\))
      set: preprocessor-if-branch-global-function-parameters
    - include: expressions
    - include: preprocessor-line-continuation

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-if-branch-global
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#\s*if)\s+(?i:(1)|(true)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.codt7.gsc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#\s*if)\s+(?i:(0)|(false)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.codt7.gsc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      set: preprocessor-block-if-branch-statements
    - match: (?=(?!{{non_func_keywords}}){{identifier}}\s*\()
      set: preprocessor-if-branch-function-call
    - include: negated-block
    - include: statements

  preprocessor-if-branch-function-call:
    - meta_content_scope: meta.function-call.codt7.gsc
    # - match: '{{identifier}}'
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set: preprocessor-if-branch-function-call-arguments

  preprocessor-if-branch-function-call-arguments:
    - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
    - match: \)
      scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*(?:elif|else))\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-if-branch-function-call-arguments-finish
    - include: expressions

  preprocessor-if-branch-function-call-arguments-finish:
    - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
    - match: \)
      scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
      pop: true
    - include: expressions

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.codt7.gsc
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      set: preprocessor-block-finish-if-branch-statements
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
      pop: true
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.codt7.gsc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.codt7.gsc keyword.control.import.define.codt7.gsc
      push:
        - meta_content_scope: meta.preprocessor.macro.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: ({{identifier}})(?=\()
          scope: entity.name.function.preprocessor.codt7.gsc
          set:
            - match: \(
              scope: punctuation.section.group.begin.codt7.gsc
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.codt7.gsc
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.codt7.gsc meta.group.codt7.gsc
    - match: '{{identifier}}'
      scope: variable.parameter.codt7.gsc
    - match: \)
      scope: punctuation.section.group.end.codt7.gsc
      set: preprocessor-macro-definition
    - match: \.{3}(\s*\.)+
      scope: invalid.illegal.unexpected-character.codt7.gsc
    - match: \.{3}
      scope: variable.parameter.variadic.codt7.gsc
    # Eat 1 or 2 dots to prevent premature warning
    - match: \.*
    - match: ','
      scope: punctuation.separator.codt7.gsc
      push:
        - match: \.{3}(\s*\.)+
          scope: invalid.illegal.unexpected-character.codt7.gsc
        - match: \.{3}
          scope: variable.parameter.variadic.codt7.gsc
        # Eat 1 or 2 dots to prevent premature warning
        - match: \.*
        - match: '{{identifier}}'
          scope: variable.parameter.codt7.gsc
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: (?=\))
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.codt7.gsc
          captures:
            1: punctuation.definition.comment.codt7.gsc
            2: punctuation.definition.comment.codt7.gsc
        - match: \S+?
          scope: invalid.illegal.unexpected-character.codt7.gsc
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: (/\*).*(\*/)
      captures:
        1: punctuation.definition.comment.codt7.gsc
        2: punctuation.definition.comment.codt7.gsc
    - match: \S+?
      scope: invalid.illegal.unexpected-character.codt7.gsc
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.codt7.gsc

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.codt7.gsc
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
    - match: '\}'
      scope: punctuation.section.block.end.codt7.gsc
    - include: expressions

  preprocessor-practical-workarounds:
    - include: preprocessor-convention-ignore-uppercase-ident-lines
    - include: preprocessor-convention-ignore-uppercase-calls-without-semicolon

  preprocessor-convention-ignore-uppercase-calls-without-semicolon:
    - match: ^\s*{{macro_identifier}}\s*(\()(?=[^\)]*\)\s*$)
      captures:
        1: punctuation.section.group.begin.codt7.gsc
      push:
        - meta_scope: meta.assumed-macro.codt7.gsc
        - match: \)
          scope: punctuation.section.group.end.codt7.gsc
          pop: true
        - include: expressions

  preprocessor-convention-ignore-uppercase-ident-lines:
    - match: ^(\s*{{macro_identifier}})+\s*$
      scope: meta.assumed-macro.codt7.gsc

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|undef))\b
      captures:
        1: keyword.control.import.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
    - match: ^\s*(#\s*insert)\b
      captures:
        1: keyword.control.import.insert.codt7.gsc
      push:
        - meta_scope: meta.preprocessor.insert.codt7.gsc
        - include: preprocessor-line-ending
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
    - include: preprocessor-practical-workarounds

  preprocessor-expressions:
    - include: preprocessor-macro-define
    - include: preprocessor-other

  compiler-global:
    - match: ^\s*(#\s*using)\b
      captures:
        1: keyword.control.import.using.codt7.gsc
      push:
        - meta_scope: meta.compiler.using.codt7.gsc
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*include)\b
      captures:
        1: keyword.control.import.include.codt7.gsc
      push:
        - meta_scope: meta.compiler.include.codt7.gsc
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*namespace)\b
      captures:
        1: keyword.control.import.namespace.codt7.gsc
      push:
        - meta_scope: meta.compiler.namespace.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '{{identifier}}'
          scope: entity.name.namespace.codt7.gsc
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*precache)\b
      captures:
        1: keyword.control.import.precache.codt7.gsc
      push:
        - meta_scope: meta.compiler.precache.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \(
          scope: punctuation.section.group.begin.codt7.gsc
          push:
            - meta_scope: meta.group.codt7.gsc
            - include: preprocessor-line-continuation
            - include: preprocessor-line-ending-lookahead
            - include: preprocessor-comments
            - match: \)
              scope: punctuation.section.group.end.codt7.gsc
              pop: true
            - match: (?<=\()(?=\s*")
              push: string-precache-type
            - match: '"'
              scope: punctuation.definition.string.begin.codt7.gsc
              push:
                - meta_scope: string.quoted.double.codt7.gsc
                - match: '"'
                  scope: punctuation.definition.string.end.codt7.gsc
                  pop: true
            - match: ','
              scope: punctuation.separator.codt7.gsc
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*using_animtree)\b
      captures:
        1: keyword.control.import.using_animtree.codt7.gsc
      push:
        - meta_scope: meta.compiler.using_animtree.codt7.gsc
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \(
          scope: punctuation.section.group.begin.codt7.gsc
          push:
            - meta_scope: meta.group.codt7.gsc
            - include: preprocessor-line-continuation
            - include: preprocessor-line-ending-lookahead
            - include: preprocessor-comments
            - match: \)
              scope: punctuation.section.group.end.codt7.gsc
              pop: true
            - match: '"'
              scope: punctuation.definition.string.begin.codt7.gsc
              push:
                - meta_scope: string.quoted.double.codt7.gsc
                - meta_content_scope: meta.animtree.codt7.gsc
                - match: '"'
                  scope: punctuation.definition.string.end.codt7.gsc
                  pop: true
        - match: ';'
          scope: punctuation.terminator.codt7.gsc
          pop: true
    - match: ^\s*(#\s*animtree)\b
      captures:
        1: keyword.control.import.codt7.gsc

  string-precache-type:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: string.quoted.double.codt7.gsc
        - meta_content_scope: meta.asset-type.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
    - match: (?=\S)
      pop: true

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures
    - include: preprocessor-practical-workarounds

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#\s*if)\s+(?i:(1)|(true)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.codt7.gsc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#\s*if)\s+(?i:(0)|(false)))\b
      captures:
        1: meta.preprocessor.codt7.gsc
        2: keyword.control.import.codt7.gsc
        3: meta.number.integer.decimal.codt7.gsc constant.numeric.value.codt7.gsc
        4: constant.language.codt7.gsc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.codt7.gsc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.codt7.gsc keyword.control.import.else.codt7.gsc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.codt7.gsc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled


      #### #     # ###  ###   ####   ###   ###  #  ###  #     #  ###
      #     #   #  #  # #  #  #     #     #     # #   # ##    # #
      #      # #   #  # #  #  #     #     #     # #   # # #   # #
      ####    #    ###  ###   ####   ###   ###  # #   # #  #  #  ###
      #      # #   #    # #   #         #     # # #   # #   # #     #
      #     #   #  #    #  #  #         #     # # #   # #    ##     #
      #### #     # #    #   # ####   ###   ###  #  ###  #     #  ###

  statements:
    - include: preprocessor-statements
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      push:
        - meta_scope: meta.block.codt7.gsc
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.codt7.gsc
          pop: true
        - include: statements

  devblock-global:
    - match: '/#'
      scope: punctuation.section.devblock.begin.codt7.gsc
      push:
        - meta_scope: meta.devblock.codt7.gsc
        - match: '#/'
          scope: punctuation.section.devblock.end.codt7.gsc
          pop: true
        - include: main

  parens:
    - match: \(
      scope: punctuation.section.group.begin.codt7.gsc
      push:
        - meta_scope: meta.group.codt7.gsc
        - match: \)
          scope: punctuation.section.group.end.codt7.gsc
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.codt7.gsc
      push:
        - meta_scope: meta.brackets.codt7.gsc
        - match: \]
          scope: punctuation.section.brackets.end.codt7.gsc
          pop: true
        - include: expressions

  devblock:
    - match: '/#'
      scope: punctuation.section.devblock.begin.codt7.gsc
      push:
        - meta_scope: meta.devblock.codt7.gsc
        - match: '#/'
          scope: punctuation.section.devblock.end.codt7.gsc
          pop: true
        - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: devblock
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - include: access
    - match: ','
      scope: punctuation.separator.codt7.gsc
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.codt7.gsc
    - match: '#/'
      scope: invalid.illegal.stray-devblock-end.codt7.gsc

  late-expressions:
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.codt7.gsc

  case-default:
    - match: \b(default|case)\b
      scope: keyword.control.codt7.gsc
      push:
        - match: ':'
          scope: punctuation.separator.codt7.gsc
          pop: true
        - include: expressions


  # For operators that take notify strings as operands,
  # namely waittill, waittillmatch, notify, and endon
  # Adds an additional meta scope for auto-completions
  keywords-parens:
    - match: \b(?i:(waittillmatch|waittill|notify|endon))\b\s*(\()
      captures:
        1: keyword.operator.word.codt7.gsc
        2: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      push:
        - meta_content_scope: meta.group.codt7.gsc
        - match: \)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - match: (?=")
          push: string-notify
        - include: expressions
    - match: \b(?i:({{keyword_operators}}))\b\s*(\()
      captures:
        1: keyword.operator.word.codt7.gsc
        2: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      push:
        - meta_content_scope: meta.group.codt7.gsc
        - match: \)
          scope: meta.group.c punctuation.section.group.end.c
          pop: true
        - include: expressions

  keywords:
    - match: \bbreak\b
      scope: keyword.control.flow.break.codt7.gsc
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.codt7.gsc
    - match: \bthread\b
      scope: keyword.control.flow.thread.codt7.gsc
    - match: \breturn\b
      scope: keyword.control.flow.return.codt7.gsc
    - match: \b({{control_keywords}})\b
      scope: keyword.control.codt7.gsc
    - match: \b(?i:({{keyword_operators}}))\b
      scope: keyword.operator.word.codt7.gsc
    - match: \bnew\b
      scope: keyword.declaration.new.codt7.gsc
    - match: '#\s*animtree\b'
      scope: variable.language.codt7.gsc

  constants:
    - match: \b(?i:({{language_constant}}))\b
      scope: constant.language.codt7.gsc
    - match: \b(__FILE__|__LINE__|FASTFILE)\b
      scope: support.constant.codt7.gsc

  variables:
    - include: array-variable-name

  access-illegal:
    - match: \.(\s*\.)+
      scope: invalid.illegal.syntax.codt7.gsc

  access:
    - include: access-illegal
    - match: (\.)\s*
      captures:
        1: punctuation.accessor.codt7.gsc
      push:
        - meta_scope: meta.field-access.codt7.gsc
        - match: (?i)\bsize\b
          scope: keyword.other.codt7.gsc
        - match: '{{identifier}}'
          scope: variable.other.field.codt7.gsc
        - match: (?=\W)
          pop: true

  reference-access:
    - match: (->)\s*
      captures:
        1: punctuation.accessor.codt7.gsc
      push:
        - meta_scope: meta.method-access.codt7.gsc
        - include: access-method-call
        - match: '{{identifier}}'
          scope: variable.other.member.codt7.gsc
        - match: (?=\W)
          pop: true

  access-method-call:
    - match: (?={{identifier}}\s*\()
      set:
        - meta_content_scope: meta.method-access.codt7.gsc meta.method-call.codt7.gsc
        - match: '{{identifier}}'
        - match: \(
          scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set:
            - meta_content_scope: meta.method-call.codt7.gsc meta.group.codt7.gsc
            - match: \)
              scope: meta.method-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
              pop: true
            - include: expressions

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.codt7.gsc

  types:
    - match: \b({{basic_types}})\b
      scope: storage.type.codt7.gsc

  # due to the large number of builtins, the searching is done in an
  # isolated scope which is pushed only under certain contexts:
  # - a sys namespace is encountered (expected builtin)
  # - an unqualified identifier is used in a call (possibly builtin)
  builtin-functions:
    # sys namespace - builtin call
    - match: \b(?i:sys)\s*(::)
      captures:
        1: punctuation.accessor.codt7.gsc
      push: builtin-function-call-maybe
    # call without a namespace specifier - possibly a builtin call
    - match: (?<!::)(?=\s*{{identifier}}\s*\()
      push: builtin-function-call-maybe

  builtin-function-call-maybe:
    - match: '{{function_builtin}}'
      scope: support.function.builtin.codt7.gsc
      pop: true
    - match: (?=\S)
      pop: true

  # For when '&' is encountered followed by an identifier
  function-pointer-reference:
    - match: '{{namespace}}\s*(::)\s*\w*'
      scope: meta.developer-function-name.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
      pop: true
    - include: builtin-function-call-maybe-with-namespace

  builtin-function-call-maybe-with-namespace:
    - match: \b(?i:sys)\s*(::)
      captures:
        1: punctuation.accessor.codt7.gsc
    - include: builtin-function-call-maybe

  # This is odd but the auto-completions don't show up
  # when calling a function within enclosed brackets,
  # e.g. (zm::register_sidequest), when the user types
  # (zm::), only regular auto-completions show, so
  # the -enclosed version of the context is different
  # in a way that suppresses auto-completions from 
  # showing up until a character is entered, (zm::r).
  # When the call is not enclosed in brackets,
  # the auto-completions work fine.
  script-functions:
    - match: (?={{identifier}}\s*::[^\w\s])
      push: script-function-call-maybe-enclosed
    - match: (?={{identifier}}\s*::)
      push: script-function-call-maybe

  # like with builtin calls, check for the possibility and push to a new
  # context and capture everything there
  script-function-call-maybe:
    - match: '{{namespace}}\s*(::)\s*\w*'
      scope: meta.developer-function-name.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
      pop: true
    - match: '{{identifier}}\s*(::)\s*\w+'
      scope: meta.function-name.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
      pop: true
    - match: (?=\S)
      pop: true

  # Cloned context, except 1 or more word characters
  # are required to match as 'developer-function-name'
  # this makes auto-completions show up correctly
  # in enclosed brackets.
  script-function-call-maybe-enclosed:
    - match: '{{namespace}}\s*(::)\s*\w+'
      scope: meta.developer-function-name.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
      pop: true
    - match: '{{identifier}}\s*(::)\s*\w+'
      scope: meta.function-name.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
      pop: true
    - match: (?=\S)
      pop: true

  # Eat "array" as variable name
  array-variable-name:
    - match: \b(?i:array)\b(?!\s*(\(|:|$))

  function-call-before-paren:
    - include: builtin-functions
    - include: script-functions
    - match: '::'
      scope: punctuation.accessor.codt7.gsc
    - match: '{{identifier}}'

  t5-function-reference:
    - match: (?=::\s*{{identifier}})
      push:
        - meta_scope: meta.t5-function-reference.codt7.gsc
        - match: '::'
          scope: punctuation.accessor.codt7.gsc
        - match: '{{identifier}}'
        - match: (?=[^\w\s])
          pop: true

  function-call:
    - match: (?=({{identifier}}\s*::\s*)?{{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.codt7.gsc
        - match: \b(?=(?i:{{thread_signal_function_lookahead}})\s*\()
          set: function-call-notify
        - match: \b(?=(?i:{{kvp_function_lookahead}})\s*\()
          set: function-call-kvp
        - match: \b(?=(?i:{{weapon_name_function_lookahead}})\s*\()
          set: function-call-weapon-name
        - match: \b(?=(?i:clientfield\s*::\s*register)\s*\()
          set: function-call-clientfield-pool
        - match: \b(?=(?i:{{clientfield_function_lookahead}})\s*\()
          set: function-call-clientfield-name
        # - match: \b(?=(?i:{{sound_function_lookahead}})\s*\()
        - include: function-call-before-paren
        - match: \(
          scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set:
            - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
            - match: \)
              scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
              pop: true
            - include: expressions
    - include: script-functions

  # For functions which are wrappers for notify operators
  # or otherwise involve the passing of notify strings as arguments,
  # such as util::waittill_any(), flag::get(), etc.
  # Adds an additional meta scope for auto-completions
  function-call-notify:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?=")
          push: string-notify
        - include: expressions

  string-notify:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: meta.notify-string.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-kvp:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?<=\()(?=\s*")
          push: string-kvp-value
        - match: (?<=,)(?=\s*")
          push: string-kvp-key
        - include: expressions

  string-kvp-value:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: meta.kvp-argument-value.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  string-kvp-key:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: meta.kvp-argument-key.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-weapon-name:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?=")
          push: string-weapon-name
        - include: expressions

  string-weapon-name:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      set:
        - meta_scope: meta.weapon-name.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-clientfield-pool:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?<=\()(?=\s*")
          push: string-clientfield-pool
        - include: expressions

  string-clientfield-pool:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: meta.clientfield-pool.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true

  function-call-clientfield-name:
    - meta_content_scope: meta.function-call.codt7.gsc
    - include: function-call-before-paren
    - match: \(
      scope: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function-call.codt7.gsc meta.group.codt7.gsc
        - match: \)
          scope: meta.function-call.codt7.gsc meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - match: (?=")
          push: string-clientfield-name
        - include: expressions

  string-clientfield-name:
    - match: '"'
      scope: punctuation.definition.string.begin.codt7.gsc
      push:
        - meta_scope: meta.clientfield-name.codt7.gsc string.quoted.double.codt7.gsc
        - match: '"'
          scope: punctuation.definition.string.end.codt7.gsc
          pop: true
        - include: string_escaped_char
    - match: ''
      pop: true


                   ###  #      ###  ###     #   #
                  #     #     #   # #  #   # #  #
                  #     #     #   # #  #  #   # #
                  #  ## #     #   # ###   ##### #
                  #   # #     #   # #  #  #   # #
                  #   # #     #   # #  #  #   # #
                   ###  #####  ###  ###   #   # #####


                   #####  #     #  ###   #####   ###
                     #     #   #   #  #  #      #
                     #      # #    #  #  #      #
                     #       #     ###   #####   ###
                     #       #     #     #          #
                     #       #     #     #          #
                     #       #     #     #####   ###

  global-modifier:
    - include: comments
    - include: modifiers
    - match: (?=\S)
      set: global-type

  global-type:
    - include: comments
    - match: (?=\bclass\b)
      set: data-structures
    - match: (?=\bfunction\b)
      set: global-function
    - match: '{{macro_identifier}}\s*(\()(?=[^\)]+\))'
      captures:
        1: meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
      push:
        - meta_scope: meta.macro-call.codt7.gsc
        - meta_content_scope: meta.group.codt7.gsc
        - match: \)
          scope: meta.group.codt7.gsc punctuation.section.group.end.codt7.gsc
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set: global-function-t6
    - match: (?=\S)
      pop: true


                   ###  #      ###  ###     #   #
                  #     #     #   # #  #   # #  #
                  #     #     #   # #  #  #   # #
                  #  ## #     #   # ###   ##### #
                  #   # #     #   # #  #  #   # #
                  #   # #     #   # #  #  #   # #
                   ###  #####  ###  ###   #   # #####


      ###  #####  ###   #   #   ###  #####  #   #  ###   #####   ###
     #       #    #  #  #   #  #       #    #   #  #  #  #      #
     #       #    #  #  #   #  #       #    #   #  #  #  #      #
      ###    #    ###   #   #  #       #    #   #  ###   #####   ###
         #   #    # #   #   #  #       #    #   #  # #   #          #
         #   #    #  #  #   #  #       #    #   #  #  #  #          #
      ###    #    #   #  ###    ###    #     ###   #   # #####   ###


  data-structures:
    # Detect variable type definitions using class followed by a tag
    - match: \bclass\b
      scope: keyword.declaration.class.codt7.gsc
      set: data-structures-class-definition
    - match: (?=\S)
      pop: true

  data-structures-class-definition:
    - meta_scope: meta.class.codt7.gsc
    - include: data-structures-definition-common-begin
    - match: (?={{identifier}})
      set:
        - meta_scope: meta.class.codt7.gsc
        - match: '{{identifier}}'
          scope: entity.name.class.codt7.gsc
          set: data-structures-class-definition-after-identifier

  data-structures-class-definition-after-identifier:
    - meta_content_scope: meta.class.codt7.gsc
    - include: data-structures-definition-common-begin
    # No matching of identifiers since they should all be macros at this point
    - include: data-structures-definition-common-end
    - match: '\{'
      scope: meta.block.codt7.gsc punctuation.section.block.begin.codt7.gsc
      set:
        - meta_content_scope: meta.class.codt7.gsc meta.block.codt7.gsc
        - match: '\}'
          scope: meta.class.codt7.gsc meta.block.codt7.gsc punctuation.section.block.end.codt7.gsc
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - include: preprocessor-other
    - include: modifiers
    - include: preprocessor-workaround-eat-macro-before-identifier

  data-structures-definition-common-end:
    - match: ':'
      scope: punctuation.separator.codt7.gsc
      push:
        - include: comments
        - include: preprocessor-other
        - include: modifiers
        - match: (?={{identifier}})
          push:
            - meta_scope: entity.other.inherited-class.codt7.gsc
            - match: '{{identifier}}'
            - match: ''
              pop: true
        - match: (?=\{)
          pop: true

  preprocessor-workaround-eat-macro-before-identifier:
    # Handle macros so they aren't matched as the class name
    - match: ({{macro_identifier}})(?=\s+{{identifier}})
      captures:
        1: meta.assumed-macro.codt7.gsc

  data-structures-body:
    - include: preprocessor-data-structures
    - match: ^\s*(?=(constructor|destructor)\b)
      push: data-structures-modifier
    - match: (?=\bfunction\b)
      push: global-function
    - include: expressions

  data-structures-modifier:
    - include: comments
    - include: modifiers
    - match: \bdestructor(?=\s*(\(|$))
      scope: meta.method.destructor.codt7.gsc keyword.declaration.destructor.codt7.gsc
      set: method-definition-params
    - match: \bconstructor(?=\s*(\(|$))
      scope: meta.method.constructor.codt7.gsc keyword.declaration.constructor.codt7.gsc
      set: method-definition-params
    - match: (?=\S)
      set: data-structures-type

  data-structures-type:
    - include: comments
    - include: types
    - include: variables
    - include: constants
    - match: (?=\W)
      pop: true

  method-definition-params:
    - meta_content_scope: meta.method.codt7.gsc
    - include: comments
    - match: (?=\()
      set:
        - match: \(
          scope: meta.method.parameters.codt7.gsc meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set:
            - meta_content_scope: meta.method.parameters.codt7.gsc meta.group.codt7.gsc
            - match: \)
              scope: punctuation.section.group.end.codt7.gsc
              set: method-definition-continue
            - match: '&'
              scope: keyword.operator.address-of.codt7.gsc
            - match: '{{identifier}}(?=\s*(,|\)|=))'
              scope: variable.parameter.codt7.gsc
            - match: '='
              scope: keyword.operator.assignment.codt7.gsc
              push:
                - match: (?=,|\))
                  pop: true
                - include: expressions
                - include: preprocessor-line-continuation
            - include: comments
            - match: ','
              scope: punctuation.separator.codt7.gsc
            - include: preprocessor-line-continuation
    - match: (?=\S)
      pop: true

  method-definition-continue:
    - meta_content_scope: meta.method.codt7.gsc
    - include: comments
    - match: (?=\{)
      set: method-definition-body
    - match: (?=\S)
      pop: true

  method-definition-body:
    - meta_content_scope: meta.method.codt7.gsc meta.block.codt7.gsc
    - match: '\{'
      scope: punctuation.section.block.begin.codt7.gsc
      set:
        - meta_content_scope: meta.method.codt7.gsc meta.block.codt7.gsc
        - match: '\}'
          scope: meta.method.codt7.gsc meta.block.codt7.gsc punctuation.section.block.end.codt7.gsc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements


                   ###  #      ###  ###     #   #
                  #     #     #   # #  #   # #  #
                  #     #     #   # #  #  #   # #
                  #  ## #     #   # ###   ##### #
                  #   # #     #   # #  #  #   # #
                  #   # #     #   # #  #  #   # #
                   ###  #####  ###  ###   #   # #####


      #####  #   #  #     #   ###  #####  #   ###   #     #   ###
      #      #   #  ##    #  #       #    #  #   #  ##    #  #
      #      #   #  # #   #  #       #    #  #   #  # #   #  #
      ####   #   #  #  #  #  #       #    #  #   #  #  #  #   ###
      #      #   #  #   # #  #       #    #  #   #  #   # #      #
      #      #   #  #    ##  #       #    #  #   #  #    ##      #
      #       ###   #     #   ###    #    #   ###   #     #   ###

  global-function-t6:
    - match: '{{t6_function_decl}}'
      scope: meta.function.codt7.gsc entity.name.function.codt7.gsc
      set: function-definition-params

  global-function:
    - match: \bfunction\b
      scope: keyword.declaration.function.codt7.gsc
    - include: modifiers
    - include: comments
    # All uppercase identifier just before a newlin is most likely a macro
    - match: ([[:upper:][:digit:]_]+)\s*(\bfunction\b)?\s*$
      captures:
        1: meta.assumed-macro.codt7.gsc
        2: keyword.declaration.function.codt7.gsc
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|:|$))'
      scope: meta.assumed-macro.codt7.gsc
    # Real function definition
    - match: '(?:{{identifier}}(::))?({{identifier}})(?=\s*(\(|$))'
      scope: meta.function.codt7.gsc
      captures:
        1: punctuation.accessor.codt7.gsc
        2: entity.name.function.codt7.gsc
      set: function-definition-params
    - match: (?=\S)
      pop: true

  function-parameters:
    - meta_content_scope: meta.function.parameters.codt7.gsc meta.group.codt7.gsc
    - match: \)
      scope: punctuation.section.group.end.codt7.gsc
      set: function-definition-continue
    - match: \.{3}(\s*\.)+
      scope: invalid.illegal.unexpected-character.codt7.gsc
    - match: \.{3}
      scope: variable.parameter.variadic.codt7.gsc
    # Eat 1 or 2 dots to prevent premature warning
    - match: \.*
    - match: '&'
      scope: keyword.operator.address-of.codt7.gsc
    - match: '{{identifier}}'
      scope: variable.parameter.codt7.gsc
    - match: '='
      scope: keyword.operator.assignment.codt7.gsc
      set: function-parameter-assignment
    - include: comments
    - match: ','
      scope: punctuation.separator.codt7.gsc
    - include: preprocessor-line-continuation

  function-parameter-assignment:
    - meta_scope: meta.function.parameters.assignment.codt7.gsc meta.group.codt7.gsc
    - match: (?=,|\))
      set: function-parameters
    - include: expressions
    - include: preprocessor-line-continuation

  function-definition-params:
    - meta_content_scope: meta.function.codt7.gsc
    - include: comments
    - match: (?=\()
      set:
        - match: \(
          scope: meta.function.parameters.codt7.gsc meta.group.codt7.gsc punctuation.section.group.begin.codt7.gsc
          set: function-parameters
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.codt7.gsc
    - include: comments
    - match: (?=\{)
      set: function-definition-body
    - match: (?=\S)
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.codt7.gsc
    - match: '\{'
      scope: meta.block.codt7.gsc punctuation.section.block.begin.codt7.gsc
      set:
        - meta_content_scope: meta.function.codt7.gsc meta.block.codt7.gsc
        - match: '\}'
          scope: meta.function.codt7.gsc meta.block.codt7.gsc punctuation.section.block.end.codt7.gsc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements
