%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

# This file is part of the T7-Sublime project.
# T7-Sublime is an enhanced syntax-highlighting package for (almost) all Call of Duty Black Ops III developer file formats.
# Zone files are used by the Call of Duty fastfile linker. 
# They contain a listed set of asset type-name pairs to include in the fastfile along with some other information relevant to the build.

name: Zone
file_extensions:
  - zone
  - zpkg
  - class
scope: source.zone

variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'

  dec_digits: '{{dec_digit}}+'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'

  identifier: \b[[:alpha:]_][[:alnum:]_]*\b
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars

  asset_types: '(?i:physpreset|physconstraints|destructibledef|xanim|xmodel|xmodelmesh|material|computeshaderset|techset|image|sound|sound_patch|col_map|com_map|game_map|map_ents|gfx_map|lightdef|lensflaredef|ui_map|font|fonticon|weapon|weapondef|weaponvariant|weaponfull|cgmediatable|playersoundstable|playerfxtable|sharedweaponsounds|attachment|attachmentunique|weaponcamo|customizationtable|customizationtable_feimages|customizationtablecolor|snddriverglobals|tagfx|klf|impactsfxtable|impactsoundstable|player_character|aitype|character|xmodelalias|structuredtable|leaderboarddef|ddl|glasses|texturelist|vehicle|addon_map_ents|tracer|slug|surfacefxtable|surfacesounddef|footsteptable|entityfximpacts|entitysoundimpacts|zbarrier|vehiclefxdef|vehiclesounddef|typeinfo|scriptbundle|scriptbundlelist|rumble|bulletpenetration|locdmgtable|aimtable|animselectortable|animmappingtable|animstatemachine|behaviortree|behaviorstatemachine|sanim|lightdescription|shellshock|xcam|bgcache|texturecombo|flametable|bitfield|attachmentcosmeticvariant|maptable|maptableloadingimages|medal|medaltable|objective|objectivelist|umbra_tome|navmesh|navvolume|binaryhtml|laser|beam|streamerhint)'
  raw_types: '(?i:localize|rawfile|stringtable|scriptparsetree|keyvaluepairs|ttf|fx)'

  all_types: '{{asset_types}}|{{raw_types}}'

  header_identifiers: 'mode|type|expect|scriptbundle|class|group|title|delta'
  header_constants: 'true|false|ship|core|cp|mp|zm|common|core_common|cp_common|mp_common|zm_common|level|modtools|cp_level|mp_level|zm_level|cp_mod_level|mp_mod_level|zm_mod_level'

  global_identifiers: 'level|linker|scriptbundlelist'

  meta_directives: 'include|ignore|ignore_type|ignore_missing_shipped'
  meta_directive_keywords: 'all|reset'

contexts:
  main:
    - include: preprocessor-global
    - include: global


         ###   ###    ## ##    ## ##    ###   #     #
        #     #   #  #  #  #  #  #  #  #   #  ##    #
        #     #   #  #  #  #  #  #  #  #   #  # #   #
        #     #   #  #  #  #  #  #  #  #   #  #  #  #
        #     #   #  #  #  #  #  #  #  #   #  #   # #
        #     #   #  #  #  #  #  #  #  #   #  #    ##
         ###   ###   #  #  #  #  #  #   ###   #     #

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.zone
      push:
        - meta_scope: string.quoted.double.zone
        - match: '"'
          scope: punctuation.definition.string.end.zone
          pop: true

  numbers:
    # decimal float
    - match: |-
        (?x:
          \b({{dec_digits}})
          (?:
            ( (\.)
              (?:
                {{dec_digits}} {{dec_exponent}}?
                | {{dec_exponent}}
                | (?!\.)
              )
            )
          ) ({{dec_suffix}})?
          | ( (\.) {{dec_digits}} {{dec_exponent}}? ) ({{dec_suffix}})?
        )
      scope: meta.number.float.decimal.zone
      captures:
        1: constant.numeric.value.zone
        2: constant.numeric.value.zone
        3: punctuation.separator.decimal.zone
        4: invalid.illegal.numeric.suffix.zone
        5: constant.numeric.value.zone
        6: punctuation.separator.decimal.zone
        7: invalid.illegal.numeric.suffix.zone

    # decimal integer
    - match: \b({{dec_digits}})({{dec_suffix}})?
      scope: meta.number.integer.decimal.zone
      captures:
        1: constant.numeric.value.zone
        2: invalid.illegal.numeric.suffix.zone

  comments:
    - include: scope:source.t7formats#comments

  preprocessor-disabled:
    - include: scope:source.t7formats#preprocessor-disabled

  preprocessor-line-continuation:
    - include: scope:source.t7formats#preprocessor-line-continuation

  preprocessor-line-ending:
    - include: scope:source.t7formats#preprocessor-line-ending

  preprocessor-comments:
    - include: scope:source.t7formats#preprocessor-comments

  ###   ###   ####  ###   ###     ###    ###  ####   ###   ###    ###   ###
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  ###   ###   ####  ###   ###    #   #  #     ####   ###   ###   #   #  ###
  #     # #   #     #     # #    #   #  #     #         #     #  #   #  # #
  #     #  #  #     #     #  #   #   #  #     #         #     #  #   #  #  #
  #     #   # ####  #     #   #   ###    ###  ####   ###   ###    ###   #   #


                   ###  #      ###  ###    #   #
                  #     #     #   # #  #  # #  #
                  #     #     #   # #  # #   # #
                  #  ## #     #   # ###  ##### #
                  #   # #     #   # #  # #   # #
                  #   # #     #   # #  # #   # #
                   ###  #####  ###  ###  #   # #####



  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-rule-enabled-global:
    - match: '^\s*((#\s*if)\s+(?i:(1)|(true)))\b'
      captures:
        1: meta.preprocessor.zone
        2: keyword.control.import.zone
        3: meta.number.integer.decimal.zone constant.numeric.value.zone
        4: constant.language.zone
      push:
        - match: '^\s*(#\s*endif)\b'
          captures:
            1: meta.preprocessor.zone keyword.control.import.zone
          pop: true
        - match: '^\s*(#\s*else)\b'
          captures:
            1: meta.preprocessor.zone keyword.control.import.else.zone
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.zone
            - match: '(?=^\s*#\s*endif\b)'
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: '(?=^\s*#\s*(else|endif)\b)'
              pop: true
            - include: preprocessor-global
            - include: global

  preprocessor-rule-disabled-global:
    - match: '^\s*((#\s*if)\s+(?i:(0)|(false)))\b'
      captures:
        1: meta.preprocessor.zone
        2: keyword.control.import.zone
        3: meta.number.integer.decimal.zone constant.numeric.value.zone
        4: constant.language.zone
      push:
        - match: '^\s*(#\s*endif)\b'
          captures:
            1: meta.preprocessor.zone keyword.control.import.zone
          pop: true
        - match: '^\s*(#\s*else)\b'
          captures:
            1: meta.preprocessor.zone keyword.control.import.else.zone
          push:
            - match: '(?=^\s*#\s*endif\b)'
              pop: true
            - include: preprocessor-global
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.zone
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-other-global:
    - match: '^\s*(#\s*(?:if|ifdef|ifndef))\b'
      captures:
        1: keyword.control.import.zone
      push:
        - meta_scope: meta.preprocessor.zone
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on 
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create diferent scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.zone keyword.control.import.zone
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - include: preprocessor-global
    - include: global

  preprocessor-elif-else-branch-global:
    - match: '(?=^\s*(#\s*endif)\b)'
      pop: true
    - include: preprocessor-global
    - include: global


  ###   ###   ####  ###   ###     ###    ###  ####   ###   ###    ###   ###
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  #  #  #  #  #     #  #  #  #   #   #  #     #     #     #      #   #  #  #
  ###   ###   ####  ###   ###    #   #  #     ####   ###   ###   #   #  ###
  #     # #   #     #     # #    #   #  #     #         #     #  #   #  # #
  #     #  #  #     #     #  #   #   #  #     #         #     #  #   #  #  #
  #     #   # ####  #     #   #   ###    ###  ####   ###   ###    ###   #   #


      #### #     # ###  ###   ####   ###   ###  #  ###  #     #  ###
      #     #   #  #  # #  #  #     #     #     # #   # ##    # #
      #      # #   #  # #  #  #     #     #     # #   # # #   # #
      ####    #    ###  ###   ####   ###   ###  # #   # #  #  #  ###
      #      # #   #    # #   #         #     # # #   # #   # #     #
      #     #   #  #    #  #  #         #     # # #   # #    ##     #
      #### #     # #    #   # ####   ###   ###  #  ###  #     #  ###



  preprocessor-expressions:
    - include: preprocessor-macro-define
    - include: preprocessor-other

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.zone keyword.control.import.define.zone
      push:
        - meta_content_scope: meta.preprocessor.macro.zone
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.zone
          set:
            - match: '\('
              scope: punctuation.section.group.begin.zone
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.zone
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.zone meta.group.zone
    - match: '{{identifier}}'
      scope: variable.parameter.zone
    - match: '\)'
      scope: punctuation.section.group.end.zone
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.zone
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.zone
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.zone
          captures:
            1: punctuation.definition.comment.zone
            2: punctuation.definition.comment.zone
        - match: '\S+?'
          scope: invalid.illegal.unexpected-character.zone
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: (/\*).*(\*/)
      scope: comment.block.zone
      captures:
        1: punctuation.definition.comment.zone
        2: punctuation.definition.comment.zone
    - match: '\S+?'
      scope: invalid.illegal.unexpected-character.zone
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.zone

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.zone
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # - match: '\{'
    #   scope: punctuation.section.block.begin.zone
    # - match: '\}'
    #   scope: punctuation.section.block.end.zone
    - include: expressions

  preprocessor-other:
    - match: '^\s*(#\s*(?:if|ifdef|ifndef|elif|else|undef))\b'
      captures:
        1: keyword.control.import.zone
      push:
        - meta_scope: meta.preprocessor.zone
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
    - match: '^\s*(#\s*endif)\b'
      captures:
        1: meta.preprocessor.zone keyword.control.import.zone
    - match: ^\s*(#\s*include)\b
      captures:
        1: keyword.control.import.include.zone
      push:
        - meta_scope: meta.preprocessor.include.zone
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.zone
          push:
            - meta_scope: string.quoted.double.include.zone
            - match: '"'
              scope: punctuation.definition.string.end.zone
              pop: true


                   ###  #      ###  ###     #   #
                  #     #     #   # #  #   # #  #
                  #     #     #   # #  #  #   # #
                  #  ## #     #   # ###   ##### #
                  #   # #     #   # #  #  #   # #
                  #   # #     #   # #  #  #   # #
                   ###  #####  ###  ###   #   # #####

  global:
    - include: global-constants
    - include: expressions
    - include: meta-directives
    - include: assets

  global-constants:
    - match: '\b(ZONENAME)\b'
      scope: support.constant.zone

  expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: header-directive

  header-directive:
    - match: '\s*(?=>)'
      push:
        - match: '>'
          scope: punctuation.header-directive.zone
          set:
            - meta_scope: meta.header.zone
            - match: '\b({{global_identifiers}})\b'
              captures:
                1: constant.language.zone
              push:
                - match: (?=\s*,|$\n)
                  pop: true
                - match: '\.'
                  scope: punctuation.accessor.zone
                - match: '{{identifier}}'
                  scope: variable.parameter
            - match: '\b({{header_identifiers}})\b'
              scope: keyword.other.zone markup.italic
            - match: ','
              scope: punctuation.separator.zone
              set:
                - meta_content_scope: meta.header.zone
                - match: $\n
                  pop: true
                - include: global-constants
                - match: '\b({{header_constants}})\b'
                  scope: constant.language.zone
                - include: numbers
            - match: $\n
              pop: true

  meta-directives:
    - match: '^\s*({{meta_directives}})\b'
      captures:
        1: keyword.other.zone markup.italic
      push:
        - meta_scope: meta.directive.zone
        - match: $\n
          pop: true
        - match: ','
          scope: punctuation.separator.zone
        - match: '\b({{meta_directive_keywords}})\b'
          scope: variable.language.zone
        - match: '\|\-'
          scope: keyword.operator.zone
        - include: asset-type-in-line

  asset-name:
    - match: ','
      scope: punctuation.separator.zone
      push:
        - meta_content_scope: meta.asset-name.zone
        - match: $\n
          scope: meta.asset-name.zone
          pop: true
        - match: ','
          scope: invalid.illegal.unexpected-character.zone

  asset:
    - include: asset-type
    - include: asset-name

  assets:
    - include: raw-asset
    - include: asset

  asset-type:
    - match: '^\s*(?:({{asset_types}})|({{raw_types}}))\b'
      captures:
        1: entity.name.type.zone markup.italic
        2: support.type.zone markup.italic

  asset-type-in-line:
    - match: '\b(?:({{asset_types}})|({{raw_types}}))\b'
      captures:
        1: entity.name.type.zone markup.italic
        2: support.type.zone markup.italic

  extra-comma:
    - match: ','
      scope: invalid.illegal.unexpected-character.zone

  raw-asset:
    - include: scriptparsetree
    - include: stringtable

  scriptparsetree:
    - match: '(?=^\s*scriptparsetree\b)'
      push:
        - meta_content_scope: meta.scriptparsetree.zone
        - match: $\n
          scope: meta.scriptparsetree.zone
          pop: true
        - include: asset-type
        - match: ','
          scope: punctuation.separator.zone
          set:
            - meta_content_scope: meta.scriptparsetree.zone meta.asset-name.zone
            - match: $\n
              scope: meta.scriptparsetree.zone meta.asset-name.zone
              pop: true
            - include: extra-comma

  stringtable:
    - match: '(?=^\s*stringtable\b)'
      push:
        - meta_content_scope: meta.stringtable.zone
        - match: $\n
          scope: meta.stringtable.zone
          pop: true
        - include: asset-type
        - match: ','
          scope: punctuation.separator.zone
          set:
            - meta_content_scope: meta.stringtable.zone meta.asset-name.zone
            - match: $\n
              scope: meta.stringtable.zone meta.asset-name.zone
              pop: true
            - include: extra-comma

  fx:
    - match: '(?=^\s*fx\b)'
      push:
        - meta_content_scope: meta.fx.zone
        - match: $\n
          scope: meta.fx.zone
          pop: true
        - include: asset-type
        - match: ','
          scope: punctuation.separator.zone
          set:
            - meta_content_scope: meta.fx.zone meta.asset-name.zone
            - match: $\n
              scope: meta.fx.zone meta.asset-name.zone
              pop: true
            - include: extra-comma

  ttf:
    - match: '(?=^\s*ttf\b)'
      push:
        - meta_content_scope: meta.ttf.zone
        - match: $\n
          scope: meta.ttf.zone
          pop: true
        - include: asset-type
        - match: ','
          scope: punctuation.separator.zone
          set:
            - meta_content_scope: meta.ttf.zone meta.asset-name.zone
            - match: $\n
              scope: meta.ttf.zone meta.asset-name.zone
              pop: true
            - include: extra-comma
