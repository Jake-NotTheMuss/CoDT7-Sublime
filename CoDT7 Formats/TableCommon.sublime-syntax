%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

# This file is part of the T7-Sublime project.
# T7-Sublime is an enhanced syntax-highlighting package for (almost) all Call of Duty Black Ops III developer file formats.
# Table Common is an internal library containing common rules which are used in various table contexts.

name: Table Common
hidden: true
scope: text.codt7.table.common
version: 2

variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'

  dec_digits: '{{dec_digit}}+'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'

contexts:
  main:
    - match: ''

##[ COMMON CONTEXTS ]#######################################################

  # to be included by the last context for a row, when only a newline or EOF is expected
  eol-unexpected-characters:
    - match: (?=,)
      set: unexpected-character

  unexpected-character:
    - match: '.'
      scope: invalid.illegal.unexpected-character.codt7.table.sound.common

  end-of-col-look:
    - match: (?=,|$)
      pop: true

  comments:
    - match: \#+
      scope: punctuation.definition.comment.codt7.table.sound.common
      push: comments-body

  comments-body:
    - meta_scope: comment.line.number-sign.codt7.table.sound.common
    # NOTE: The reason for consuming the newline character is as follows.
    # When triggering a snippet, its scope is tested to the *right* of the
    # cursor. So, if you don't want your snippet to trigger in a comment,
    # you have to use something like <scope>source.shell - comment</scope>.
    # If the newline character is not scoped as a comment too, then that
    # scope will never work, because the scope to the right of the cursor
    # will never be a comment scope. That is, unless we consume the newline
    # character (or we are editing something in the middle of an existing
    # comment).
    - match: \n
      pop: true

  # For names that are referenced beyong just the sound table,
  # e.g. string alias, sound alias, etc.
  generic_alias:
    - match: \w+
      scope: entity.name.other.codt7.table.sound.common markup.italic

  # For internal sound table names, such as curve types, template ids,
  # duck names, etc. Some names scoped under this are referenced
  # in other areas, however, such as context types/values.
  generic_identifier:
    - match: \w+
      scope: variable.language.codt7.table.sound.common

  numbers:
    # minus sign
    - match: '-'
      scope: keyword.operator.arithmetic.codt7.table.common
    # decimal float
    - match: |-
        (?x:
          \b({{dec_digits}})
          (?:
            ( (\.)
              (?:
                {{dec_digits}} {{dec_exponent}}?
                | {{dec_exponent}}
                | (?!\.)
              )
            )
          ) ({{dec_suffix}})?
          | ( (\.) {{dec_digits}} {{dec_exponent}}? ) ({{dec_suffix}})?
        )
      scope: meta.number.float.decimal.codt7.table.common
      captures:
        1: constant.numeric.value.codt7.table.common
        2: constant.numeric.value.codt7.table.common
        3: punctuation.separator.decimal.codt7.table.common
        4: invalid.illegal.numeric.suffix.codt7.table.common
        5: constant.numeric.value.codt7.table.common
        6: punctuation.separator.decimal.codt7.table.common
        7: invalid.illegal.numeric.suffix.codt7.table.common

    # decimal integer
    - match: \b({{dec_digits}})({{dec_suffix}})?
      scope: meta.number.integer.decimal.codt7.table.common
      captures:
        1: constant.numeric.value.codt7.table.common
        2: invalid.illegal.numeric.suffix.codt7.table.common

































