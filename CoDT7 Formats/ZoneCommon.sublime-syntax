%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

# This file is part of the T7-Sublime project.
# T7-Sublime is an enhanced syntax-highlighting package for (almost) all Call of Duty Black Ops III developer file formats.
# Zone Common is an internal library containing common rules which are used in various zone-related contexts.

name: Zone Common
hidden: true
scope: text.codt7.table.zone.common
version: 2
extends: Packages/CoDT7 Formats/TableCommon.sublime-syntax

variables:
  asset_types: |-
    \b(?ix:
      addon_map_ents
    | aimtable
    | aitype
    | animmappingtable
    | animselectortable
    | animstatemachine
    | attachment
    | attachmentcosmeticvariant
    | attachmentunique
    | beam
    | behaviorstatemachine
    | behaviortree
    | bgcache
    | binaryhtml
    | bulletpenetration
    | cgmediatable
    | character
    | col_map
    | computeshaderset
    | com_map
    | customizationtable
    | customizationtablecolor
    | customizationtable_feimages
    | ddl
    | destructibledef
    | entityfximpacts
    | entitysoundimpacts
    | flametable
    | font
    | fonticon
    | footsteptable
    | game_map
    | gfx_map
    | glasses
    | image
    | impactsfxtable
    | impactsoundstable
    | laser
    | leaderboarddef
    | lensflaredef
    | lightdef
    | lightdescription
    | locdmgtable
    | maptable
    | maptableloadingimages
    | map_ents
    | material
    | medal
    | medaltable
    | navmesh
    | navvolume
    | objective
    | objectivelist
    | physconstraints
    | physpreset
    | playerfxtable
    | playersoundstable
    | player_character
    | rumble
    | sanim
    | scriptbundle
    | scriptbundlelist
    | sharedweaponsounds
    | shellshock
    | slug
    | snddriverglobals
    | sound
    | sound_patch
    | structuredtable
    | surfacefxtable
    | surfacesounddef
    | tagfx
    | techset
    | texturecombo
    | texturelist
    | tracer
    | typeinfo
    | ui_map
    | umbra_tome
    | vehicle
    | vehiclefxdef
    | vehiclesounddef
    | weapon
    | weaponcamo
    | weapondef
    | weaponfull
    | weaponvariant
    | xanim
    | xcam
    | xmodel
    | xmodelalias
    | xmodelmesh
    | zbarrier
    )\b

  raw_types: |-
    \b(?ix:
      bitfield
    | fx
    | keyvaluepairs
    | klf
    | localize
    | rawfile
    | scriptparsetree
    | streamerhint
    | stringtable
    | ttf
    )\b

  attribute_names: mode|type|expect|scriptbundle|class|group|title|delta
  attribute_values: true|false|core|cp|mp|zm|common|level|(?:cp|mp|zm)_common|(?:cp|mp|zm)(?:_mod)?_level|ship|modtools

  language_constant: level|linker|scriptbundlelist

  linker_directives: include|ignore|ignore_type|ignore_missing_shipped
  control_keywords: all|reset

contexts:
  main:
    - match: ''

  numbers:
    # TODO
    - include: scope:source.codt7.common#numbers

  # Use lookaheads for line comments so that the newline
  # does not get consumed, allowing the row context to
  # correctly pop
  comments:
    - match: /\*
      scope: punctuation.definition.comment.codt7.common
      push:
        - meta_scope: comment.block.codt7.common
        - match: \*/
          scope: punctuation.definition.comment.codt7.common
          pop: true
        - match: ^\s*(\*)(?!/)
          captures:
            1: punctuation.definition.comment.codt7.common
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.codt7.common
    - match: //
      scope: punctuation.definition.comment.codt7.common
      push:
        - meta_scope: comment.line.double-slash.codt7.common
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.codt7.common
        - match: (?=\n)
          pop: true

  # override comment tokens from TableCommon.sublime-syntax
  unexpected-character:
    - meta_include_prototype: false
    - match: /\*
      scope: punctuation.definition.comment.codt7.common
      set:
        - meta_scope: comment.block.codt7.common
        - match: \*/
          scope: punctuation.definition.comment.codt7.common
          pop: true
        - match: ^\s*(\*)(?!/)
          captures:
            1: punctuation.definition.comment.codt7.common
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.codt7.common
    - match: //
      scope: punctuation.definition.comment.codt7.common
      set:
        - meta_scope: comment.line.double-slash.codt7.common
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.codt7.common
        - match: \n
          pop: true
    - match: $\n
      pop: true
    - match: '.'
      scope: invalid.illegal.unexpected-character.codt7.table.zone.common

  asset-type:
    - match: ({{asset_types}})|({{raw_types}})
      captures:
        1: support.type.asset.codt7.table.zone.common
        2: support.type.raw.codt7.table.zone.common

  keywords:
    - match: \b({{control_keywords}})\b
      scope: variable.language.codt7.table.zone.common
    - match: \|\-
      scope: keyword.control.codt7.table.zone.common
