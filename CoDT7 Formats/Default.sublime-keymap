[
	// toggle documentstion block
	{ "keys": ["ctrl+alt+forward_slash"], "command": "toggle_documentation", "context":
			[
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
			]
	},
	// toggle devblock
	{ "keys": ["alt+d"], "command": "toggle_devblock", "context":
			[
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
			]
	},
	// auto-remove devblock markers on backspace
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/CoDT7 Formats/Delete Left Right X2.sublime-macro"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "/#$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^#/", "match_all": true },
					{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
					{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.other - punctuation.definition.string.end", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
			]
	},
	// auto-pair devblock markers
	{ "keys": ["#"], "command": "insert_snippet", "args": {"contents": "#$0#/"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "/$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
			]
	},
	// devblock indentation 
	// global devblocks shouldn't indent, so we use a different macro that just inserts newlines,
	// and use the indentation macro for devblocks in functions/methods
	{ "keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/CoDT7 Formats/Add Line in Global Devblock.sublime-macro"}, "context":
			[
					{ "key": "setting.auto_indent", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "/#$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^#/", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc - (meta.block)" }
			]
	},
	{ "keys": ["shift+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/CoDT7 Formats/Add Line in Global Devblock.sublime-macro"}, "context":
			[
					{ "key": "setting.auto_indent", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "/#$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^#/", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc - (meta.block)" }
			]
	},
	{ "keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Braces.sublime-macro"}, "context":
			[
					{ "key": "setting.auto_indent", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "/#$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^#/", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc & (meta.block)" }
			]
	},
	{ "keys": ["shift+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Braces.sublime-macro"}, "context":
			[
					{ "key": "setting.auto_indent", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "/#$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^#/", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc & (meta.block)" }
			]
	},
	// Always auto-pair brackets in localized strings
	{ "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$0]"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.localizedstrings & (string)" }
		]
	},
	// template command for new files with codt7 scope
	{ "keys": ["ctrl+alt+n"], "command": "new_codt7_localized_strings", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.localizedstrings" }
		]
	},
	{ "keys": ["ctrl+alt+n"], "command": "new_codt7_vision", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.vision" }
		]
	},
	{ "keys": ["ctrl+alt+n"], "command": "new_codt7_sound_alias", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.alias" }
		]
	},
	{ "keys": ["ctrl+alt+n"], "command": "new_codt7_sound_reverb", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.reverb" }
		]
	},
	{ "keys": ["ctrl+alt+n"], "command": "new_codt7_sound_t5_alias", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.t5alias" }
		]
	},
	{ "keys": ["ctrl+alt+n"], "command": "new_codt7_sound_t5_reverb", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.t5reverb" }
		]
	},
	{ "keys": ["ctrl+alt+n"], "command": "new_codt7_sound_ambient", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.ambient" }
		]
	},
	// table entry templates
	{ "keys": ["ctrl+alt+t"], "command": "new_sound_alias_entry", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.alias" }
		]
	},
	{ "keys": ["ctrl+alt+t"], "command": "new_sound_reverb_entry", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.reverb" }
		]
	},
	{ "keys": ["ctrl+alt+t"], "command": "new_sound_t5_alias_entry", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.t5alias" }
		]
	},
	{ "keys": ["ctrl+alt+t"], "command": "new_sound_t5_reverb_entry", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.t5reverb" }
		]
	},
	{ "keys": ["ctrl+alt+t"], "command": "new_sound_ambient_entry", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "text.codt7.table.sound.ambient" }
		]
	},
	// Auto-pair less-than and greater-than symbols in techsetdef's
	{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<$0>"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
					{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
					{ "key": "eol_selector", "operator": "not_equal", "operand": "string", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.techsetdef" }
			]
	},
	{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<${0:$SELECTION}>"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.techsetdef" }
			]
	},
	{ "keys": [">"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true },
					{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
					{ "key": "eol_selector", "operator": "not_equal", "operand": "string", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.techsetdef" }
			]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "<$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true },
					{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
					{ "key": "eol_selector", "operator": "not_equal", "operand": "string", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "source.codt7.techsetdef" }
			]
	},
	// GSC documentation comment auto-paring for lt-gt and brackets
	{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<$0>"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\"|\t| |\\)|]|\\}|>|$)", "match_all": true },
					{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "[a-zA-Z0-9_]$", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
			]
	},
	{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<${0:$SELECTION}>"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
			]
	},
	{ "keys": [">"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
			]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
			[
					{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
					{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
					{ "key": "preceding_text", "operator": "regex_contains", "operand": "<$", "match_all": true },
					{ "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true },
					{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
			]
	},
	// Auto-pair brackets in GSC documentation comments
	{ "keys": ["("], "command": "insert_snippet", "args": {"contents": "($0)"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\"|\t| |\\)|]|;|\\}|$)", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
		]
	},
	{ "keys": ["("], "command": "insert_snippet", "args": {"contents": "(${0:$SELECTION})"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
		]
	},
	{ "keys": [")"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
		]
	},
	// Auto-pair square brackets in GSC documentation comments
	{ "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$0]"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\"|\t| |\\)|]|;|\\}|$)", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
		]
	},
	{ "keys": ["["], "command": "insert_snippet", "args": {"contents": "[${0:$SELECTION}]"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
		]
	},
	{ "keys": ["]"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "comment.block.documentation.codt7.gsc" }
		]
	},
	// insert documentation template commands
	{ "keys": ["ctrl+shift+d"], "command": "insert_gsc_documentation_template", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
		]
	},
	// add extra space when typing space in empty brackets
	{ "keys": [" "], "command": "insert_snippet", "args": {"contents": " $0 "}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "(\\(|\\[)$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(\\)|\\])", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\( $", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^ \\)", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
		]
	},
	// clear completions on dot character insertion. This makes sure the correct auto completions show up.
	{ "keys": ["."], "command": "run_macro_file", "args": {"file": "res://Packages/CoDT7 Formats/Dot Clear Completions.sublime-macro"}, "context":
		[
			{ "key": "following_text", "operator": "regex_contains", "operand": "^[^\\w\\s]", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
		]
	},
	{ "keys": [">"], "command": "run_macro_file", "args": {"file": "res://Packages/CoDT7 Formats/Arrow Clear Completions.sublime-macro"}, "context":
		[
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "-$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^[^\\w\\s]", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.codt7.gsc" }
		]
	}
]
